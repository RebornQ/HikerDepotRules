{"title":"视界论坛R","author":"微笑&发粪涂墙&Reborn","version":30,"updateText":"本次规则采用快速提交。","tips":"","rule":"rule:"}