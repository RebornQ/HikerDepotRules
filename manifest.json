{
  "notice": "仓库已迁移至Github",
  "data": [
    {
      "title": "分类仓库模板",
      "author": "Reborn",
      "version": 7,
      "updateText": "1.‘‘优化’’：直链仓库迁移至Github",
      "tips": "‘‘新功能’’:搜索仓库规则，需仓库管理者自行配置搜索解析仓库列表",
      "rule": "rule:"
    },
    {
      "title": "剧汇TV•Re",
      "author": "Reborn",
      "version": 0,
      "tips": "码云仓库已恢复",
      "rule": "rule://5rW36ZiU6KeG55WM6KeE5YiZ5YiG5Lqr77yM5b2T5YmN5YiG5Lqr55qE5piv77ya6aaW6aG16aKR6YGT77yMUmVib3Ju77+laG9tZV9ydWxl77+leyJmaXJzdEhlYWRlciI6ImNsYXNzIiwidGl0bGUiOiLliafmsYdUVuKAolJlIiwiYXV0aG9yIjoiUmVib3JuIiwidXJsIjoiaHR0cHM6Ly9hcGkuMzY1a3F6cy5jbjo0OTc2L2FwaS9wcm9ncmFtbWVzP2xpbWl0PTIxJnBhZ2U9ZnlwYWdlQC0xQCZzb3J0PWZ5eWVhciZmeWNsYXNzJmxvY2F0aW9uPWZ5YXJlYTtnZXQ7dXRmLTg7e0RldmljZS1JREAxMDAwMDAwMC01YzU4LWI1NTQtMDAwMC0wMDAwMTE3M2VmYWYmJlVzZXItQWdlbnRALmpzOidWaWV3ZXIvMS40LjUgQW5kcm9pZC81LjEuMSBQaG9uZS9zYW1zdW5nLVNNLU45NzYwJ30iLCJ2ZXJzaW9uIjowLCJjb2xfdHlwZSI6Im1vdmllXzMiLCJjbGFzc19uYW1lIjoi5YWo6YOoJueUteinhuWJpybnlLXlvbEmVFbliqjmvKsm5Yqo5ryr55S15b2xJue7vOiJuibnuqrlvZXniYciLCJjbGFzc191cmwiOiImY2F0ZWdvcnk9NWQyZDYxNjZlYmEzZTUwMDE2NjE3YzkyJmNhdGVnb3J5PTVkMmQ2MTZhZWJhM2U1MDAxNjYxN2M5MyZjYXRlZ29yeT01ZTIzYmNlZDMyMDQzMDAwMjlhMmJkMjImY2F0ZWdvcnk9NWU0YzlmMTg4ZTFmNTAwMDM1MjMwMDgwJmNhdGVnb3J5PTVlYjM2ZWM1Y2Q1ZjEwMDA0MWM5NDQ3MiZjYXRlZ29yeT01ZWIzNmVkMGNkNWYxMDAwNDFjOTQ0NzUiLCJhcmVhX25hbWUiOiLlhajpg6gm5Lit5Zu95aSn6ZmGJuS4reWbvea4r+WPsCbmrKfnvo4m5pel5pysJumfqeWbvSbljbDluqYm5rOw5Zu9JuWFtuS7liIsImFyZWFfdXJsIjoiJuS4reWbveWkp+mZhibkuK3lm73muK/lj7Am5qyn576OJuaXpeacrCbpn6nlm70m5Y2w5bqmJuazsOWbvSblhbbku5YiLCJ5ZWFyX25hbWUiOiLmnIDmlrAm5pyA54OtIiwieWVhcl91cmwiOiJuZXcmaG90IiwiZmluZF9ydWxlIjoianM6IHZhciBqc29uID0ge307XHJcbmV2YWwoJ2pzb249JyArIGdldFJlc0NvZGUoKSk7XHJcbnZhciByZXMgPSB7fTtcclxudmFyIGQgPSBbXTtcclxuZm9yICh2YXIgaSA9IDA7IGkgPCBqc29uLmRhdGEucHJvZ3JhbW1lcy5sZW5ndGg7IGkrKykge1xyXG4gdmFyIHIgPSB7fTtcclxuIHZhciBqID0ganNvbi5kYXRhLnByb2dyYW1tZXNbaV07XHJcbiByLnRpdGxlID0gai50aXRsZTtcbiBpZiAoai51cGRhdGVTdGF0ZSA9PSAyKVxuIHIuZGVzYyA9ICflhagnICsgai5yZXNvdXJjZUNvdW50ICsgJ+mbhic7XG4gZWxzZVxuIHIuZGVzYyA9ICfmm7TmlrDliLAnICsgai5yZXNvdXJjZUNvdW50ICsgJ+mbhic7XHJcbiByLnBpY191cmwgPSBqLnZlcnRpY2FsQ292ZXI7XHJcbiByLnVybCA9ICdodHRwczovL2FwaXMuMzY1a3F6cy5jbi9hcGkvcHJvZ3JhbW1lcy8nICsgai5pZCsnJztcclxuIGlmIChyLnRpdGxlICE9PSBudWxsICYmIHIudGl0bGUgIT09IHVuZGVmaW5lZCAmJiByLnRpdGxlICE9PSAnJykgZC5wdXNoKHIpO1xyXG59XHJcbnJlcy5kYXRhID0gZDtcclxuc2V0SG9tZVJlc3VsdChyZXMpOyIsInNlYXJjaF91cmwiOiJodHRwczovL2FwaS4zNjVrcXpzLmNuOjQ5NzYvYXBpL3Byb2dyYW1tZXM/bGltaXQ9MjEmcGFnZT1meXBhZ2VALTFAJnNlYXJjaD0qKiZzb3J0PW1hdGNoO2dldDt1dGYtODt7RGV2aWNlLUlEQDIwMDAwMDAwLTVjNTgtYjU1NC0wMDAwLTAwMDAxMTczZWZhZiYmVXNlci1BZ2VudEAuanM6J1ZpZXdlci8xLjQuNSBBbmRyb2lkLzUuMS4xIFBob25lL3NhbXN1bmctU00tTjk3Nid9IiwidGl0bGVDb2xvciI6IiM2NzNBQjciLCJncm91cCI6IjHvuI/ig6Pwn5SO5b2x6KeG5YWN5ZeF5o6iIiwic2VhcmNoRmluZCI6ImpzOiB2YXIganNvbiA9IGdldFJlc0NvZGUoKTtcclxudmFyIGZpcmVzID0ge307XHJcbnZhciByZXNKc29uID0ge307XHJcbmV2YWwoJ3Jlc0pzb249JyArIGpzb24pO1xyXG52YXIgcmVzID0gW107XHJcbmlmIChyZXNKc29uLmRhdGEucHJvZ3JhbW1lcy5sZW5ndGggPD0gMCkge1xyXG4gZmlyZXMuZGF0YSA9IFtdO1xyXG4gc2V0U2VhcmNoUmVzdWx0KGZpcmVzKTtcclxufSBlbHNlIHtcclxuIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzSnNvbi5kYXRhLnByb2dyYW1tZXMubGVuZ3RoOyBpKyspIHtcclxuIHZhciBtbyA9IHJlc0pzb24uZGF0YS5wcm9ncmFtbWVzW2ldO1xyXG4gdmFyIHIgPSB7fTtcclxuIHIudGl0bGUgPSBtby50aXRsZTtcclxuIHIudXJsID0gJ2h0dHBzOi8vYXBpcy4zNjVrcXpzLmNuL2FwaS9wcm9ncmFtbWVzLycgKyBtby5pZDtcclxuIGlmIChtby51cGRhdGVTdGF0ZSA9PSAyKVxuIHIuZGVzYyA9ICflhagnICsgbW8ucmVzb3VyY2VDb3VudCArICfpm4YnO1xyXG4gZWxzZVxyXG4gci5kZXNjID0gJ+abtOaWsOWIsCcgKyBtby5yZXNvdXJjZUNvdW50ICsgJ+mbhic7XHJcbiByLmNvbnRlbnQgPSBtby5zdW1tYXJ5O1xyXG4gci5pbWcgPSBtby52ZXJ0aWNhbENvdmVyO1xyXG4gcmVzLnB1c2gocik7XHJcbiB9XHJcbiBmaXJlcy5kYXRhID0gcmVzO1xyXG4gc2V0U2VhcmNoUmVzdWx0KGZpcmVzKTtcclxufSIsImRldGFpbF9jb2xfdHlwZSI6InRleHRfMiIsImRldGFpbF9maW5kX3J1bGUiOiJqczpcbi8vc2V0RXJyb3IoZ2V0UmVzQ29kZSgpKTtcblxyXG52YXIgcmVzID0ge307XHJcbnZhciByZXN1bHQgPSBbXTtcblxuLy8g5re75Yqg5o+S5Lu25YaF5a65XG52YXIgZmlsZVVybCA9IFwiaHR0cHM6Ly9naXRlZS5jb20vUmVib3JuXzAvSGlrZXJSdWxlcy9yYXcvcm9vdC9KdUh1aVRWX1JlX0ZpbmRSdWxlX3YyLm1pbi5qc1wiO1xuZXZhbChmZXRjaChmaWxlVXJsLHt9KSk7XG5cbnJlcy5kYXRhPXJlc3VsdDtcbnNldEhvbWVSZXN1bHQocmVzKTsiLCJzZGV0YWlsX2NvbF90eXBlIjoidGV4dF8yIiwic2RldGFpbF9maW5kX3J1bGUiOiIqIn0="
    },
    {
      "title": "哔咪哔咪•Re",
      "author": "Reborn",
      "version": 0,
      "tips": "一个动漫网站",
      "rule": "rule://5rW36ZiU6KeG55WM6KeE5YiZ5YiG5Lqr77yM5b2T5YmN5YiG5Lqr55qE5piv77ya6aaW6aG16aKR6YGT77yMUmVib3Ju77+laG9tZV9ydWxl77+leyJ0aXRsZSI6IuWTlOWSquWTlOWSquKAolJlIiwiYXV0aG9yIjoiUmVib3JuIiwidXJsIjoiaHR0cDovL3d3dy5iaW1pYmltaS5tZS92b2RzaG93L2Z5Y2xhc3MtLWZ5eWVhci1meWFyZWEtLS0tLWZ5cGFnZS0tLS8iLCJ2ZXJzaW9uIjowLCJjb2xfdHlwZSI6Im1vdmllXzMiLCJjbGFzc19uYW1lIjoi5paw55Wq5pS+6YCBJuWbveS6p+WKqOa8qybnlarnu4TorqHliJIm5Ymn5Zy65Yqo55S7JuW9seinhiIsImNsYXNzX3VybCI6InJpbWFuJmd1b21hbiZmYW56dSZqdWNoYW5nJm1vdmUiLCJhcmVhX25hbWUiOiLlhajpg6gm54Ot6KGAJuWGkumZqSbmkJ7nrJEm5Ymn5oOFJuaBi+eIsSbmoKHlm60m5aWH5bm7JuenkeW5uyIsImFyZWFfdXJsIjoiJueDreihgCblhpLpmakm5pCe56yRJuWJp+aDhSbmgYvniLEm5qCh5ZutJuWlh+W5uybnp5HlubsiLCJ5ZWFyX25hbWUiOiLmjInml7bpl7Qm5oyJ5Lq65rCUJuaMieivhOWIhiIsInllYXJfdXJsIjoidGltZSZoaXRzJnNjb3JlIiwiZmluZF9ydWxlIjoiLnZfdGImJnVsJiZsaTsuaW5mbyYmYSYmVGV4dDtpbWcmJmRhdGEtb3JpZ2luYWw7LmZsJiZUZXh0O2EmJmhyZWYiLCJzZWFyY2hfdXJsIjoiaHR0cDovL3d3dy5iaW1pYmltaS5tZS92b2Qvc2VhcmNoLz93ZD0qKiIsInRpdGxlQ29sb3IiOiIjZmY2NzNhYjciLCJncm91cCI6IjHvuI/ig6Pwn5SO5Yqo5ryr5YWN5ZeF5o6iIiwic2VhcmNoRmluZCI6Ii52X3RiJiZ1bCYmbGk7YSwxJiZUZXh0O2EmJmhyZWY7cCwxJiZUZXh0O3AmJlRleHQ7aW1nJiZkYXRhLW9yaWdpbmFsIiwiZGV0YWlsX2NvbF90eXBlIjoidGV4dF8yIiwiZGV0YWlsX2ZpbmRfcnVsZSI6Ii5wbGF5X3NvdXJjZV90YWImJmE7YSYmVGV4dDsqOyo7Kj09PmJvZHkmJi5wbGF5ZXJfbGlzdCxmeUluZGV4JiZsaTthJiZUZXh0Oyo7KjthJiZocmVmLmpzOmlucHV0KydAbGF6eVJ1bGU9aHRtbO+8hu+8hu+8hu+8hi5wbGF5LXBsYXllcu+8hu+8hu+8hu+8hnNjcmlwdO+8hu+8hu+8hu+8hkh0bWwuanM6ZXZhbChpbnB1dCnvvJvvvJt2YXIgbGluaz1wbGF5ZXJfZGF0YS5saW5rX25leHTvvJvvvJtpZihsaW5rPT11bmRlZmluZWR8bGluaz09XCJcIil7bGluaz1wbGF5ZXJfZGF0YS5saW5rfXZhciBzdWJfc3RyPWxpbmsuc3Vic3RyaW5nKGxpbmsubGVuZ3RoLTIsbGluay5sZW5ndGgtMSnvvJvvvJtsaW5rPWxpbmsuc3Vic3RyaW5nKDAsbGluay5sZW5ndGgtMinvvJvvvJt2YXIgZXBpc29kZT1wYXJzZUludChzdWJfc3RyKe+8m++8m2lmKGVwaXNvZGUhPTEpe2VwaXNvZGUtLX1saW5rKz0oZXBpc29kZStcIi9cIinvvJvvvJt2YXIgaG9zdD1cImh0dHA6Ly93d3cuYmltaWJpbWkubWVcIitsaW5r77yb77ybdmFyIGZldGNoVXJsPVwiaHR0cDovLzQ5LjIzNC41Ni4yNDYvZGFubXUvcGxheS5waHA/dXJsPVwiK3BsYXllcl9kYXRhLnVybCtcIu+8hu+8hm15dXJsPVwiK2hvc3TvvJvvvJt2YXIgcGxheUh0bWzvvJvvvJt2YXIgcGxheVVybO+8m++8m2lmKHBsYXllcl9kYXRhLmZyb209PVwia3p5dW5cInxwbGF5ZXJfZGF0YS5mcm9tPT1cImtzeXVuXCIpe2ZldGNoVXJsPVwiaHR0cDovLzQ5LjIzNC41Ni4yNDYvZGFubXUvXCIrcGxheWVyX2RhdGEuZnJvbStcIi5waHA/dXJsPVwiK3BsYXllcl9kYXRhLnVybCtcIu+8hu+8hm15dXJsPVwiK2hvc3TvvJvvvJtwbGF5SHRtbD1mZXRjaChmZXRjaFVybCx7aGVhZGVyczp7XCJSZWZlcmVyXCI6aG9zdH19Ke+8m++8m3BsYXlVcmxKcz1wbGF5SHRtbC5tYXRjaCgvKHZhciB1cmwpLio/XFwn77yb77ybL2cpWzBd77yb77ybfWVsc2UgaWYocGxheWVyX2RhdGEuZnJvbT09XCJwaWFvcXVhblwiKXtmZXRjaFVybD1cImh0dHA6Ly80OS4yMzQuNTYuMjQ2L2Rhbm11L3BpYW9xdWFuLnBocD91cmw9XCIrcGxheWVyX2RhdGEudXJsK1wi77yG77yGbXl1cmw9XCIraG9zdO+8m++8m3BsYXlIdG1sPWZldGNoKGZldGNoVXJsLHtoZWFkZXJzOntcIlJlZmVyZXJcIjpob3N0fX0p77yb77ybcGxheVVybEpzPXBsYXlIdG1sLm1hdGNoKC8odmFyIHVybCkuKj9cXCfvvJvvvJsvZylbMF3vvJvvvJtpZihwbGF5VXJsSnMuaW5kZXhPZihcIi5tM3U4XCIpPi0xKXtwbGF5VXJsSnM9cGxheVVybEpzLnJlcGxhY2UoL2h0dHBzOlxcXFwvXFxcXC8oLiopY29tLyxcImh0dHBzOi8vcmVzY2RuLnlpc2hpaHVpLmNvbVwiKX19ZWxzZSBpZihwbGF5ZXJfZGF0YS5mcm9tPT1cInp1aWRhbTN1OFwiKXtmZXRjaFVybD1cImh0dHA6Ly80OS4yMzQuNTYuMjQ2L2Rhbm11L20zdTgucGhwP3VybD1cIitwbGF5ZXJfZGF0YS51cmwrXCLvvIbvvIZteXVybD1cIitob3N077yb77ybcGxheUh0bWw9ZmV0Y2goZmV0Y2hVcmwse2hlYWRlcnM6e1wiUmVmZXJlclwiOmhvc3R9fSnvvJvvvJtwbGF5VXJsSnM9cGxheUh0bWwubWF0Y2goLyh2YXIgdXJsKS4qP1xcJ++8m++8my9nKVswXe+8m++8m31lbHNlIGlmKHBsYXllcl9kYXRhLmZyb209PVwiZHBsYXllclwifHBsYXllcl9kYXRhLmZyb209PVwicWl5aVwifHBsYXllcl9kYXRhLmZyb209PVwicXFcIil7cGxheVVybEpzPVwidmFyIHVybD1ob3N0XCJ9ZWxzZXtwbGF5SHRtbD1mZXRjaChmZXRjaFVybCx7aGVhZGVyczp7XCJSZWZlcmVyXCI6aG9zdH19Ke+8m++8m3BsYXlVcmxKcz1wbGF5SHRtbC5tYXRjaCgvKHZhciB1cmwpLio/XFwn77yb77ybL2cpWzBdfWV2YWwocGxheVVybEpzKe+8m++8m3VybCc7dGV4dF8zIiwic2RldGFpbF9jb2xfdHlwZSI6InRleHRfMiIsInNkZXRhaWxfZmluZF9ydWxlIjoiKiJ9"
    },
    {
      "title": "总仓库",
      "author": "Reborn",
      "version": 38,
      "updateText": "1.‘‘修复’’:修复部分无法识别为已导入规则的问题\n2.更多更新日志请点击访问源网页查看",
      "rule": "rule:"
    },
    {
      "title": "视界论坛R",
      "author": "微笑&发粪涂墙&Reborn",
      "version": 29,
      "updateText": "本次规则采用快速提交。",
      "tips": "",
      "rule": "rule://5rW36ZiU6KeG55WM77yM6aaW6aG16aKR6YGT77+laG9tZV9ydWxl77+leyJ0aXRsZSI6IuinhueVjOiuuuWdm1IiLCJhdXRob3IiOiLlvq7nrJEm5Y+R57Kq5raC5aKZJlJlYm9ybiIsInZlcnNpb24iOjI5LCJ1cmwiOiJodHRwczovL2hhaWt1b3NoaWppZS5jbi90b3BpY3Mvbm9kZS9meUFsbD9wPWZ5cGFnZSIsImNvbF90eXBlIjoidGV4dF8xIiwiY2xhc3NfbmFtZSI6IuacgOaWsCbng63pl6gm5o6o6I2QJuinhueVjCIsImNsYXNzX3VybCI6Im5ld2VzdCZob3QmcmVjb21tZW5kJjEiLCJhcmVhX25hbWUiOiLmsYLliqkm5o+S5Lu2JuaVmeeoiybmlrnlnIYm5pG46bG8IiwiYXJlYV91cmwiOiI1JjcmOCYyJjYiLCJzb3J0X25hbWUiOiIiLCJ5ZWFyX25hbWUiOiIiLCJzb3J0X3VybCI6IiIsInllYXJfdXJsIjoiIiwiZmluZF9ydWxlIjoianM6XG52YXIgcmVzID0ge307XG52YXIgZCA9IFtdO1xuLy8g5L2/55SoIGVtb2ppIOWbvuagh+abv+aNouaWh+acrO+8jOS9v+eUqC8xIOS4jeS9v+eUqC8wXG52YXIgdXNlRW1vamkgPSAxO1xuLy8g5biW5a2Q5YiG57G76aKc6ImyXG52YXIgbm9kZUNvbG9yID0gXCIjMjk3OUZGXCI7XG4vLyDmmK/lkKbmmL7npLrngrnotZ7mlbDor4TorrrmlbDnrYnvvIzmmL7npLovMSDkuI3mmL7npLovMFxudmFyIHNob3dMaWtlID0gMTtcblxuLyoqXG4gKiDpgJrov4fmj5Lku7boh6rliqjojrflj5YgVG9rZW4g5Yiw5paH5Lu25Lit54S25ZCO6Ieq5Yqo6K+75Y+WXG4gKlxuICog5rOo5oSP77ya5Lul5LiK5pa555qEIHRva2VuIOS4uuS4u1xuICovXG52YXIgZmlsZVRva2VuID0gZ2V0VmFyKCdoaWtlcl90b2tlbicpO1xuaWYgKGZpbGVUb2tlbiA9PT0gJycpIHtcbnRyeSB7XG4gICAgZmlsZVRva2VuID0gZmV0Y2ggKCdoaWtlcjovL2ZpbGVzL3J1bGVzL2pzL2hpa2VyYmJzX3Rva2VuLmpzJywge30pO1xuICAgIGlmIChmaWxlVG9rZW4gPT0gbnVsbCkgZmlsZVRva2VuID0gJyc7XG59IGNhdGNoIChlKSB7XG4gICAgZmlsZVRva2VuID0gJyc7XG59XG59XG52YXIgY29va2llID0gZmlsZVRva2VuID09PSAnJyA/ICcnIDogJ3VzZXJUb2tlbj0nICsgZmlsZVRva2VuO1xudmFyIGhlYWRlcnMgPSAnJztcbmlmIChjb29raWUgIT09ICcnKSB7XG4gICAgaGVhZGVycyA9ICc7Z2V0O1VURi04O3tVc2VyLUFnZW50QEFuZHJvaWQmJkNvb2tpZUAnICsgY29va2llICsgJ30nO1xufVxuXG52YXIgaHRtbCA9IGdldFJlc0NvZGUoKTtcbnZhciBsaXN0ID0gcGFyc2VEb21Gb3JBcnJheShodG1sLCAnLnRvcGljLWxpc3QmJi50b3BpYy1pdGVtJyk7XG5mb3IgKGxldCBqID0gMDsgaiA8IGxpc3QubGVuZ3RoOyBqKyspIHtcbiAgICBsZXQgbWV0YUl0ZW1zID0gcGFyc2VEb21Gb3JBcnJheShsaXN0W2pdLCAnLnRvcGljLW1ldGEmJi5tZXRhLWl0ZW0nKTtcbiAgICAvLyBzZXRFcnJvcihKU09OLnN0cmluZ2lmeShtZXRhSXRlbXMpKTtcbiAgICBsZXQgbWV0YU5vZGUgPSBwYXJzZURvbUZvckh0bWwobWV0YUl0ZW1zWzJdLCAnVGV4dCcpO1xuICAgIGxldCBtZXRhID0gcGFyc2VEb21Gb3JIdG1sKG1ldGFJdGVtc1swXSwgJ1RleHQnKVxuICAgICAgICArICcgICdcbiAgICAgICAgKyBwYXJzZURvbUZvckh0bWwobWV0YUl0ZW1zWzFdLCAnVGV4dCcpXG4gICAgICAgICsgJyAgJ1xuICAgICAgICArICc8Zm9udCBjb2xvcj1cIicgKyBub2RlQ29sb3IgKyAnXCI+JyArIG1ldGFOb2RlICsgJzwvZm9udD4nO1xuICAgIGxldCBtZXRhVGFncyA9IHBhcnNlRG9tRm9yQXJyYXkoJzxkaXY+JyArIG1ldGFJdGVtc1szXSArICc8L2Rpdj4nLCAnZGl2JiYudGFnJyk7XG4gICAgLy8gc2V0RXJyb3IoSlNPTi5zdHJpbmdpZnkobWV0YVRhZ3MpKTtcbiAgICBsZXQgbWV0YVRhZyA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWV0YVRhZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbWV0YVRhZyA9IChtZXRhVGFnID09PSAnJyA/IG1ldGFUYWcgOiAobWV0YVRhZyArICcgICcpKVxuICAgICAgICAgICAgKyBwYXJzZURvbUZvckh0bWwobWV0YVRhZ3NbaV0sICdUZXh0JylcbiAgICB9XG4gICAgbWV0YVRhZyA9IG1ldGFUYWcucmVwbGFjZSgn572u6aG2JywgJ+KAnOKAnOe9rumhtuKAneKAnScpO1xuICAgIG1ldGEgPSBtZXRhICsgJyAgJyArIG1ldGFUYWc7XG4gICAgbGV0IGRlc2MgPSAn4oCc4oCc4oCd4oCdJyArIG1ldGE7XG4gICAgaWYgKHNob3dMaWtlKSB7XG4gICAgICAgIGxldCBsaWtlSXRlbXMgPSBwYXJzZURvbUZvckFycmF5KGxpc3Rbal0sICcubGlrZSYmLmxpa2UtaXRlbScpO1xuICAgICAgICAvLyBzZXRFcnJvcihKU09OLnN0cmluZ2lmeShsaXN0W2pdKSk7XG4gICAgICAgIGxldCBsaWtlQ291bnQgPSBwYXJzZURvbUZvckh0bWwobGlrZUl0ZW1zWzBdLCAnVGV4dCcpO1xuICAgICAgICBsZXQgY29tbWVudENvdW50ID0gcGFyc2VEb21Gb3JIdG1sKGxpa2VJdGVtc1sxXSwgJ1RleHQnKTtcbiAgICAgICAgbGV0IHNlZUNvdW50ID0gcGFyc2VEb21Gb3JIdG1sKGxpa2VJdGVtc1syXSwgJ1RleHQnKTtcbiAgICAgICAgbGV0IGxpa2UgPSAn6I636LWe77yaJyArIChsaWtlQ291bnQgIT0gbnVsbCAmJiBsaWtlQ291bnQgIT09ICd1bmRlZmluZWQnICYmIGxpa2VDb3VudCAhPT0gJycgID8gbGlrZUNvdW50IDogJzAnKVxuICAgICAgICAgICAgKyAnXFx0XFx0J1xuICAgICAgICAgICAgKyAn6K+E6K6677yaJyArIChjb21tZW50Q291bnQgIT0gbnVsbCAgJiYgY29tbWVudENvdW50ICE9PSAndW5kZWZpbmVkJyAmJiBjb21tZW50Q291bnQgIT09ICcnID8gY29tbWVudENvdW50IDogJzAnKVxuICAgICAgICAgICAgKyAnXFx0XFx0J1xuICAgICAgICAgICAgKyfmn6XnnIvvvJonICsgKHNlZUNvdW50ICE9IG51bGwgICYmIHNlZUNvdW50ICE9PSAndW5kZWZpbmVkJyAmJiBzZWVDb3VudCAhPT0gJycgPyBzZWVDb3VudCA6ICcwJyk7XG4gICAgICAgIC8vIPCfkY3wn4+78J+RjeKdpO+4j/Cfp6HimaXvuI/wn5Kb8J+WpOKZoeKZpfCfkqzwn5GB77iP4p6/8JOBulxuICAgICAgICBpZiAodXNlRW1vamkpXG4gICAgICAgICAgICBsaWtlID0gbGlrZS5yZXBsYWNlKFwi6I636LWe77yaXCIsIFwi4p2k77iPIFwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwi6K+E6K6677yaXCIsIFwi8J+SrCBcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZShcIuafpeeci++8mlwiLCBcIvCfkYHvuI8gXCIpO1xuICAgICAgICBkZXNjID0gZGVzYyArICdcXG5cXG4nICsgbGlrZTtcbiAgICB9XG4gICAgbGV0IHVybCA9IHBhcnNlRG9tKGxpc3Rbal0sJ2gxJiZhJiZocmVmJykgKyBcIiNmeXBhZ2VcIiArIFwiI25vSGlzdG9yeSNcIlxuICAgICAgICArIChoZWFkZXJzID09PSAnJyA/ICcnIDogaGVhZGVycyk7XG4gICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcbi9nLCAnJyk7XG4gICAgLy8gc2V0RXJyb3IodXJsKTtcbiAgICAvLyBodHRwczovL2hhaWt1b3NoaWppZS5jbi90b3BpYy8yOTgyI2Z5cGFnZSNub0hpc3RvcnkjO0dFVDt1dGYtODt7Q29va2llQHVzZXJUb2tlbj14eHh4eHh9XG4gICAgZC5wdXNoKHtcbiAgICAgICAgdGl0bGU6IHBhcnNlRG9tRm9ySHRtbChsaXN0W2pdLCAnaDEmJlRleHQnKSxcbiAgICAgICAgZGVzYzogZGVzYyxcbiAgICAgICAgdXJsOiB1cmwsXG4gICAgfSk7XG59XG5yZXMuZGF0YSA9IGQ7XG5zZXRIb21lUmVzdWx0KHJlcyk7Iiwic2VhcmNoRmluZCI6ImpzOlxudmFyIHJlcyA9IHt9O1xudmFyIGQgPSBbXTtcblxudmFyIGZpbGVUb2tlbiA9IGdldFZhcignaGlrZXJfdG9rZW4nKTtcbmlmIChmaWxlVG9rZW4gPT09ICcnKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgZmlsZVRva2VuID0gZmV0Y2ggKCdoaWtlcjovL2ZpbGVzL3J1bGVzL2pzL2hpa2VyYmJzX3Rva2VuLmpzJywge30pO1xuICAgICAgICBpZiAoZmlsZVRva2VuID09IG51bGwpIGZpbGVUb2tlbiA9ICcnO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZmlsZVRva2VuID0gJyc7XG4gICAgfVxufVxudmFyIGNvb2tpZSA9IGZpbGVUb2tlbiA9PT0gJycgPyAnJyA6ICd1c2VyVG9rZW49JyArIGZpbGVUb2tlbjtcbnZhciBoZWFkZXJzID0gJyc7XG5pZiAoY29va2llICE9PSAnJykge1xuICAgIGhlYWRlcnMgPSAnO2dldDtVVEYtODt7VXNlci1BZ2VudEBBbmRyb2lkJiZDb29raWVAJyArIGNvb2tpZSArICd9Jztcbn1cblxuLyoqXG4gKiDojrflj5bmkJzntKLmupDnoIFcbiAqIGV0Yy5cbiAqIGhpa2VyOi8vZW1wdHkvIyoqI2Z5cGFnZVxuICogaHR0cHM6Ly93d3cuZG9nZWRvZ2UuY29tL3Jlc3VsdHM/cT1zaXRlOmhhaWt1b3NoaWppZS5jbivop4TliJkmcD1meXBhZ2VcbiAqL1xubGV0IHVybFNwbGl0cyA9IE1ZX1VSTC5zcGxpdCgnIycpO1xubGV0IHNlYXJjaFVybCA9ICdodHRwczovL3d3dy5kb2dlZG9nZS5jb20vcmVzdWx0cz9xPXNpdGU6aGFpa3Vvc2hpamllLmNuKydcbiAgICArIHVybFNwbGl0c1sxXVxuICAgICsgJyZwPSdcbiAgICArIHVybFNwbGl0c1syXTtcbmxldCBzZWFyY2hDb29raWVzID0gZ2V0VmFyKCdkb2dlX3Rva2VuJyk7XG5pZiAoc2VhcmNoQ29va2llcy5pbmRleE9mKCd0b2tlbicpIDwgMCB8fCBzZWFyY2hDb29raWVzLmluZGV4T2YoJ3ZJRCcpIDwgMCkge1xuICAgIGxldCBzZWFyY2hJbml0SHRtbCA9IGZldGNoKHNlYXJjaFVybCwge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnVXNlci1BZ2VudCc6IE1PQklMRV9VQVxuICAgICAgICB9LFxuICAgICAgICB3aXRoSGVhZGVyczogdHJ1ZSxcbiAgICAgICAgd2l0aFN0YXR1c0NvZGU6IHRydWUsXG4gICAgICAgIHJlZGlyZWN0OiBmYWxzZSxcbiAgICB9KTtcbiAgICBsZXQgc2VhcmNoSGVhZGVycyA9IEpTT04ucGFyc2Uoc2VhcmNoSW5pdEh0bWwpLmhlYWRlcnM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWFyY2hIZWFkZXJzW1wic2V0LWNvb2tpZVwiXS5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWFyY2hDb29raWVzICs9IChzZWFyY2hIZWFkZXJzW1wic2V0LWNvb2tpZVwiXVtpXSArICc7Jyk7XG4gICAgfVxuICAgIHB1dFZhcjIoJ2RvZ2VfdG9rZW4nLCBzZWFyY2hDb29raWVzKTtcbn1cbmxldCBodG1sID0gZmV0Y2goc2VhcmNoVXJsLCB7XG4gICAgaGVhZGVyczoge1xuICAgICAgICAnVXNlci1BZ2VudCc6IE1PQklMRV9VQSxcbiAgICAgICAgJ2Nvb2tpZSc6IHNlYXJjaENvb2tpZXNcbiAgICB9LFxufSlcblxuLy8gc2V0RXJyb3IoaHRtbCk7XG5cbnZhciBsaXN0ID0gcGFyc2VEb21Gb3JBcnJheShodG1sLCAnLnJlc3VsdHMmJi5yZXN1bHQnKTtcbi8vIHNldEVycm9yKEpTT04uc3RyaW5naWZ5KGxpc3QpKTtcbmZvciAodmFyIGogaW4gbGlzdCkge1xuICAgIHRyeSB7XG4gICAgICAgIGxldCB1cmwgPSBwYXJzZURvbUZvckh0bWwobGlzdFtqXSwgJy5yZXN1bHRfX2V4dHJhc19fdXJsJiYucmVzdWx0X191cmxfX2RvbWFpbiYmVGV4dCcpO1xuICAgICAgICAvLyBzZXRFcnJvcihKU09OLnN0cmluZ2lmeSh1cmwpKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh1cmwuc3RhcnRzV2l0aChcImh0dHBzOi8vXCIpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHVybCA9IFwiaHR0cHM6Ly9cIiArIHVybFxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7IH1cbiAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgIHRpdGxlOiBwYXJzZURvbUZvckh0bWwobGlzdFtqXSwgJy5yZXN1bHRfX3RpdGxlJiZUZXh0JyksXG4gICAgICAgICAgICB1cmw6IHVybCArIFwiI2Z5cGFnZVwiICsgXCIjbm9IaXN0b3J5I1wiICsgKGhlYWRlcnMgPT09IFwiXCIgPyBcIlwiIDogaGVhZGVycyksXG4gICAgICAgICAgICBjb250ZW50OiBwYXJzZURvbUZvckh0bWwobGlzdFtqXSwgJy5yZXN1bHRfX3NuaXBwZXQmJlRleHQnKSxcbiAgICAgICAgICAgIGRlc2M6IHVybFxuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7IH1cbn1cblxucmVzLmRhdGEgPSBkO1xuc2V0U2VhcmNoUmVzdWx0KHJlcyk7Iiwic2VhcmNoX3VybCI6Imhpa2VyOi8vZW1wdHkvIyoqI2Z5cGFnZSIsInRpdGxlQ29sb3IiOiIjZmYxNDhlOGUiLCJncm91cCI6IiPvuI/ig6PluLjnlKgiLCJkZXRhaWxfY29sX3R5cGUiOiJ0ZXh0XzEiLCJkZXRhaWxfZmluZF9ydWxlIjoianM6XG52YXIgcmVzID0ge307XG52YXIgZCA9IFtdO1xudmFyIHVybFNwbGl0cyA9IE1ZX1VSTC5zcGxpdChcIiNcIik7XG52YXIgbVVybCA9IHVybFNwbGl0c1swXTtcbnZhciBwYWdlID0gdXJsU3BsaXRzWzFdO1xudmFyIGNvbFR5cGUgPSAncmljaF90ZXh0JztcblxuLy8g5piv5ZCm5pi+56S65biW5a2Q5YiG57G777yM5pi+56S6LzEg5LiN5pi+56S6LzBcbnZhciBzaG93TWV0YSA9IDE7XG4vLyDluJblrZDliIbnsbvlrZfkvZPlpKflsI8gYmlnL+WkpyBzcGFuL+S4rSBzbWFsbC/lsI9cbnZhciBtZXRhU2l6ZSA9ICdzbWFsbCc7XG4vLyDluJblrZDliIbnsbvpopzoibJcbnZhciBub2RlQ29sb3IgPSBcIiMyOTc5RkZcIjtcbi8vIOaYr+WQpuaYvuekuuato+aWh++8jOaYvuekui8xIOS4jeaYvuekui8wXG52YXIgc2hvd0NvbnRlbnQgPSAxO1xuLy8g5piv5ZCm5pi+56S66K+E6K6677yM5pi+56S6LzEg5LiN5pi+56S6LzBcbnZhciBzaG93Q29tbWVudCA9IDE7XG4vLyDmmK/lkKbpmpDol4/lm77niYfvvIzpmpDol48vMSDkuI3pmpDol48vMFxudmFyIGhpZGVJbWcgPSAwO1xuLy8g5L2/55SoIGVtb2ppIOWbvuagh+abv+aNouaWh+acrO+8jOS9v+eUqC8xIOS4jeS9v+eUqC8wXG52YXIgdXNlRW1vamkgPSAxO1xuLy8g6K+E6K6655So5oi36aKc6ImyXG52YXIgdXNlckNvbG9yID0gXCIjMjk3OUZGXCI7XG4vLyDor4Torrrlm57lpI3lvJXnlKjnlKjmiLfpopzoibJcbnZhciBxdW90ZVVzZXJDb2xvciA9IFwiYmxhY2tcIjtcblxuLyoqXG4gKiDnlKjmiLcgVG9rZW4gKOmcgOimgeWFiOeZu+W9leaJjeiDveiOt+WPlilcbiAqXG4gKiDmipPljIUgQ29va2llIOS4reeahCB1c2VyVG9rZW49IOWQjumdoumCo+S4suS4nOilv1xuICog5oiWXG4gKiDkuI3loavlhpnlm7rlrprlgLwg5YiZ6ZyA6YWN5ZCI5LiT55So5o+S5Lu26Ieq5Yqo6I635Y+WXG4gKiDkvYbmr4/mrKHov5DooYzop4bnlYzpg73pnIDmiZPlvIDkuIDmrKHorrrlnZtcbiAqL1xudmFyIHRva2VuID0gJyc7XG5cbi8qKlxuICog5piv5ZCm5L2/55So5o+S5Lu26Ieq5Yqo6I635Y+WIFRva2VuIOeahOaWueW8j1xuICpcbiAqIOaYry8xIOWQpi8wXG4gKi9cbnZhciBhdXRvVG9rZW4gPSAwO1xuXG4vKipcbiAqIOmAmui/h+aPkuS7tuiHquWKqOiOt+WPliBUb2tlbiDliLDmlofku7bkuK3nhLblkI7oh6rliqjor7vlj5ZcbiAqXG4gKiDms6jmhI/vvJrku6XkuIrmlrnnmoQgdG9rZW4g5Li65Li7XG4gKi9cbnZhciBmaWxlVG9rZW4gPSBnZXRWYXIoJ2hpa2VyX3Rva2VuJyk7XG5pZiAoZmlsZVRva2VuID09PSAnJykge1xudHJ5IHtcbiAgICBmaWxlVG9rZW4gPSBmZXRjaCAoJ2hpa2VyOi8vZmlsZXMvcnVsZXMvanMvaGlrZXJiYnNfdG9rZW4uanMnLCB7fSk7XG4gICAgaWYgKGZpbGVUb2tlbiA9PSBudWxsKSBmaWxlVG9rZW4gPSAnJztcbn0gY2F0Y2ggKGUpIHtcbiAgICBmaWxlVG9rZW4gPSAnJztcbn1cbn1cbnRva2VuID0gdG9rZW4gPT09ICcnID8gZmlsZVRva2VuIDogdG9rZW47XG52YXIgc2hvd1Rva2VuID0gdG9rZW4gPT09ICcnID8gZ2V0VmFyKFwiaGlrZXJiYnNcIikgOiB0b2tlbjtcbmlmIChhdXRvVG9rZW4pIHRva2VuID0gc2hvd1Rva2VuO1xuLy8gaWYgKHRva2VuID09PSAnJyAmJiBzaG93VG9rZW4gIT09ICcnKSBzZXRFcnJvcihzaG93VG9rZW4pO1xuXG4vLyDmmK/lkKbmmL7npLrloavlhpkgVG9rZW4g5o+Q56S677yM5pi+56S6LzEg5LiN5pi+56S6LzBcbnZhciBzaG93SW5wdXRUb2tlblRpcHMgPSAxO1xuLy8g5piv5ZCm5byA5ZCv5pS26JePL+eCuei1nue7k+aenOaPkOekuu+8jOaYry8xIOWQpi8wXG52YXIgcmVzdWx0VGlwcyA9IDE7XG4vLyDnrKzlh6DlpZflm77moIfvvIwtMeS4uumaj+acuu+8jOS7juS4i+mdouS4ieS4quaVsOe7hOaMkemAiVxudmFyIGljb25JbmRleCA9IC0xO1xuLy8g5pS26JeP5Zu+5qCHXG52YXIgc3Rhckljb25zID0gWyAnaHR0cHM6Ly93d3cuZWFzeWljb24ubmV0L2FwaS9yZXNpemVBcGkucGhwP2lkPTEyODYyMTcmc2l6ZT0xMjgnLFxuXTtcbi8vIOeCuei1nuWbvuagh1xudmFyIGxpa2VJY29ucyA9IFsgJ2h0dHBzOi8vd3d3LmVhc3lpY29uLm5ldC9hcGkvcmVzaXplQXBpLnBocD9pZD0xMjg4MjE3JnNpemU9MTI4JyxcbiAgICAvKidodHRwczovL3d3dy5lYXN5aWNvbi5uZXQvYXBpL3Jlc2l6ZUFwaS5waHA/aWQ9MTIxMTUwNyZzaXplPTEyOCcsXG4gICAgJ2h0dHBzOi8vd3d3LmVhc3lpY29uLm5ldC9hcGkvcmVzaXplQXBpLnBocD9pZD0xMjM5NTExJnNpemU9MTI4JyovXG5dO1xuLy8g5Zue5aSN5Zu+5qCHXG52YXIgY29tbWVudEljb25zID0gWyAnaHR0cHM6Ly93d3cuZWFzeWljb24ubmV0L2FwaS9yZXNpemVBcGkucGhwP2lkPTEyMzk0OTUmc2l6ZT0xMjgnLFxuXTtcbi8vIOWOn+aWh+eroOWbvuagh1xuLyp2YXIgYXJ0aWNsZUljb25zID0gWyAnaHR0cHM6Ly93d3cuZWFzeWljb24ubmV0L2FwaS9yZXNpemVBcGkucGhwP2lkPTEyMzg1MjImc2l6ZT0xMjgnLFxuXTsqL1xuXG5sZXQgaW1nRXJyb3IgPSAnPHA+PGZvbnQgY29sb3I9XCJncmV5XCI+5Zu+54mH5pqC5pe25peg5rOV5pi+56S677yM6Iul6KaB5p+l55yL6K+3PGEgaHJlZj1cIicgKyBNWV9VUkwgKyAnXCI+6K6/6Zeu5Y6f5paHPC9hPjwvZm9udD48L3A+JztcblN0cmluZy5wcm90b3R5cGUucmVwbGFjZVdpdGhDb25maXJtID0gZnVuY3Rpb24gKGNvbmZpcm1WYWx1ZSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgIGxldCByZXR1cm5WYWx1ZSA9IHRoaXM7XG4gICAgaWYgKGNvbmZpcm1WYWx1ZSkge1xuICAgICAgICByZXR1cm5WYWx1ZSA9IHRoaXMucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKVxuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG59O1xuU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlV2l0aENhbGxiYWNrID0gZnVuY3Rpb24gKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUsIGNhbGxiYWNrKSB7XG4gICAgbGV0IHJldHVyblZhbHVlID0gdGhpcztcbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm5WYWx1ZSA9IGNhbGxiYWNrKHRoaXMsIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG59O1xuZnVuY3Rpb24gaW1nVGFnKGNvbnRleHQsIGltZ1VybCkge1xuICAgIGxldCByZXBsYWNlU3RyaW5nID0gaW1nVXJsID09PSAnJyA/IGltZ0Vycm9yIDogJzxwPjxzaG93aW1nIHNyYz1cIicgKyAoaW1nVXJsICsgJ0BSZWZlcmVyPWh0dHBzOi8vaGFpa3Vvc2hpamllLmNuJykgKyAnXCI+PC9wPic7XG4gICAgaWYgKGhpZGVJbWcpIHtcbiAgICAgICAgcmVwbGFjZVN0cmluZyA9IGltZ1VybCA9PT0gJycgPyBpbWdFcnJvciA6ICc8cD48YSBocmVmPVwiJyArIGltZ1VybCArICdcIj5b54K55Ye75p+l55yL5aSn5Zu+XTwvYT48L3A+JztcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRleHQucmVwbGFjZSgvPGltZyBkYXRhLXY+L2csIHJlcGxhY2VTdHJpbmcpO1xufVxuZnVuY3Rpb24gaW1nVGFnUmVwbGFjZW1lbnQyKGNvbnRleHQsIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICBsZXQgbWF0Y2hBcnJheSA9IGNvbnRleHQubWF0Y2goc2VhcmNoVmFsdWUpO1xuICAgIGxldCByZXR1cm5WYWx1ZSA9IGNvbnRleHQ7XG4gICAgaWYgKG1hdGNoQXJyYXkgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBpdGVtID0gbWF0Y2hBcnJheVtpXTtcbiAgICAgICAgICAgIC88aW1nIChzcmN8ZGF0YS1zcmMpPVwiKC4qPylcIihbXFxzXFxTXSo/KT4vLnRlc3QoaXRlbSk7XG4gICAgICAgICAgICBsZXQgaW1nVXJsID0gUmVnRXhwLiQyO1xuICAgICAgICAgICAgaWYgKGltZ1VybCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHJldHVyblZhbHVlLnJlcGxhY2UoaXRlbSwgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZSA9IGltZ1RhZyhyZXR1cm5WYWx1ZSwgaW1nVXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG59XG5mdW5jdGlvbiBhYmJyZXZpYXRlUmVwbHlUZXh0KGNvbnRleHQsIHRleHRBcnJheSkge1xuICAgIGxldCBjb250ZW50ID0gY29udGV4dDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHRBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdGV4dCA9IHBhcnNlRG9tRm9ySHRtbCh0ZXh0QXJyYXlbaV0sIFwicCYmVGV4dFwiKTtcbiAgICAgICAgaWYgKHRleHQubGVuZ3RoID4gMzApIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UodGV4dCwgdGV4dC5zdWJzdHJpbmcoMCwgMzApICsgXCIuLi4uLi5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbmlmIChwYWdlID4gMSkge1xuXG4gICAgbGV0IGN1cnNvciA9IGdldFZhcihcImN1cnNvclwiKTtcbiAgICBpZiAocGFnZSA9PT0gJzInKSBjdXJzb3IgPSBnZXRWYXIoXCJmaXJzdF9wYWdlX2N1cnNvclwiKTtcbiAgICBjdXJzb3IgPSBjdXJzb3IgPT09ICcnID8gJzAnIDogY3Vyc29yO1xuXG4gICAgbGV0IHVybFRlbXBsYXRlID0gXCJodHRwOi8vaGFpa3Vvc2hpamllLmNuL2FwaS9jb21tZW50L2xpc3Q/ZW50aXR5VHlwZT10b3BpYyZlbnRpdHlJZD17ZW50aXR5SWR9JmN1cnNvcj17Y3Vyc29yfVwiO1xuICAgIGlmICgvdG9waWNcXC8oXFxkKykvLnRlc3QoTVlfVVJMKSA9PT0gdHJ1ZSkge1xuICAgICAgICBsZXQgZW50aXR5SWQgPSBSZWdFeHAuJDE7XG4gICAgICAgIGlmIChlbnRpdHlJZCAhPSBudWxsICYmIGVudGl0eUlkICE9PSBcIlwiKSB7XG4gICAgICAgICAgICBsZXQgbm9Nb3JlID0gZ2V0VmFyKFwibm9Nb3JlXCIgKyBlbnRpdHlJZCk7XG4gICAgICAgICAgICBub01vcmUgPSBub01vcmUgPT09ICcnID8gJzAnIDogbm9Nb3JlO1xuICAgICAgICAgICAgdXJsVGVtcGxhdGUgPSB1cmxUZW1wbGF0ZS5yZXBsYWNlKFwie2VudGl0eUlkfVwiLCBlbnRpdHlJZCk7XG4gICAgICAgICAgICB1cmwgPSB1cmxUZW1wbGF0ZS5yZXBsYWNlKFwie2N1cnNvcn1cIiwgY3Vyc29yKTtcbiAgICAgICAgICAgIC8vIHVybCA9IFwiaHR0cDovL2hhaWt1b3NoaWppZS5jbi9hcGkvY29tbWVudC9saXN0P2VudGl0eVR5cGU9dG9waWMmZW50aXR5SWQ9Mzk4JmN1cnNvcj05MTgzXCI7XG4gICAgICAgICAgICBsZXQganNvbiA9IHt9O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBqc29uID0gSlNPTi5wYXJzZShmZXRjaCh1cmwsIHt9KSk7XG4gICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBqc29uLmRhdGE7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdHMgPSBkYXRhLnJlc3VsdHM7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbm93VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgICAgICBwdXRWYXIoe2tleTogJ2N1cnNvcicsIHZhbHVlOiBkYXRhLmN1cnNvcn0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRpbWVEaWZmKG5vd1RpbWUsIGNyZWF0ZVRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIERhdGUucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChmbXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJNK1wiOiB0aGlzLmdldE1vbnRoKCkgKyAxLCAgICAgICAgICAgICAgICAgLy/mnIjku71cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkK1wiOiB0aGlzLmdldERhdGUoKSwgICAgICAgICAgICAgICAgICAgIC8v5pelXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaCtcIjogdGhpcy5nZXRIb3VycygpLCAgICAgICAgICAgICAgICAgICAvL+Wwj+aXtlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm0rXCI6IHRoaXMuZ2V0TWludXRlcygpLCAgICAgICAgICAgICAgICAgLy/liIZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzK1wiOiB0aGlzLmdldFNlY29uZHMoKSwgICAgICAgICAgICAgICAgIC8v56eSXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicStcIjogTWF0aC5mbG9vcigodGhpcy5nZXRNb250aCgpICsgMykgLyAzKSwgLy/lraPluqZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJTXCI6IHRoaXMuZ2V0TWlsbGlzZWNvbmRzKCkgICAgICAgICAgICAgLy/mr6vnp5JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgvKHkrKS8udGVzdChmbXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZtdCA9IGZtdC5yZXBsYWNlKFJlZ0V4cC4kMSwgKHRoaXMuZ2V0RnVsbFllYXIoKSArIFwiXCIpLnN1YnN0cig0IC0gUmVnRXhwLiQxLmxlbmd0aCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrIGluIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAoXCIoXCIgKyBrICsgXCIpXCIpLnRlc3QoZm10KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm10ID0gZm10LnJlcGxhY2UoUmVnRXhwLiQxLCAoUmVnRXhwLiQxLmxlbmd0aCA9PT0gMSkgPyAob1trXSkgOiAoKFwiMDBcIiArIG9ba10pLnN1YnN0cigoXCJcIiArIG9ba10pLmxlbmd0aCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm10O1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aW1lID0gbmV3IERhdGUoY3JlYXRlVGltZSkuZm9ybWF0KFwieXl5eS1NTS1kZCBoaDptbTpzc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aW1lRGlmZiA9IG5vd1RpbWUgLSBjcmVhdGVUaW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRheXMgPSBNYXRoLmZsb29yKHRpbWVEaWZmIC8gKDI0ICogMzYwMCAqIDEwMDApKTsgLy8g6K6h566X5Ye65aSp5pWwXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF5TGVhdmUgPSB0aW1lRGlmZiAlICgyNCAqIDM2MDAgKiAxMDAwKTsgLy8g6K6h566X5aSp5pWw5ZCO5Ymp5L2Z55qE5pe26Ze0XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaG91cnMgPSBNYXRoLmZsb29yKGRheUxlYXZlIC8gKDM2MDAgKiAxMDAwKSk7IC8vIOiuoeeul+WkqeaVsOWQjuWJqeS9meeahOWwj+aXtuaVsFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhvdXJMZWF2ZSA9IHRpbWVEaWZmICUgKDM2MDAgKiAxMDAwKTsgLy8g6K6h566X5Ymp5L2Z5bCP5pe25ZCO5Ymp5L2Z55qE5q+r56eS5pWwXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWludXRlcyA9IE1hdGguZmxvb3IoaG91ckxlYXZlIC8gKDYwICogMTAwMCkpOyAvLyDorqHnrpfliankvZnnmoTliIbpkp/mlbBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwIDwgZGF5cyAmJiBkYXlzIDwgMzEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lID0gZGF5cyArIFwi5aSp5YmNXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF5cyA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG91cnMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgPSBob3VycyArIFwi5bCP5pe25YmNXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZSA9IG1pbnV0ZXMgKyBcIuWIhumSn+WJjVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBxdW90ZUNvbnRlbnQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucXVvdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBxdW90ZSA9IHJlc3VsdC5xdW90ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29udGVudCA9IHBhcnNlRG9tRm9ySHRtbChxdW90ZS5jb250ZW50LCAnYm9keSYmSHRtbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuaWNrbmFtZSA9IHF1b3RlLnVzZXIubmlja25hbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2Jsb2cuY3Nkbi5uZXQvR3Jvb3RCYWJ5L2FydGljbGUvZGV0YWlscy85OTk4MDM5NVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjcmVhdGVUaW1lID0gcXVvdGUudXNlci5jcmVhdGVUaW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aW1lID0gdGltZURpZmYobm93VGltZSwgY3JlYXRlVGltZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gY29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLzxhW1xcc1xcU10uKj88XFwvYT4vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29tbWVudFJlcGx5VGV4dEFycmF5ID0gY29udGVudC5tYXRjaCgvPHBbXFxzXFxTXS4qPzxcXC9wPi9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGFiYnJldmlhdGVSZXBseVRleHQoY29udGVudCwgY29tbWVudFJlcGx5VGV4dEFycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1b3RlQ29udGVudCA9ICc8YmxvY2txdW90ZSBjbGFzcz1cImNvbW1lbnQtcXVvdGVcIj48ZGl2IGNsYXNzPVwiY29tbWVudC1xdW90ZS11c2VyXCI+PGEgY2xhc3M9XCJxdW90ZS1uaWNrbmFtZVwiPjxmb250IGNvbG9yPVwiJyArIHF1b3RlVXNlckNvbG9yICsgJ1wiPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBuaWNrbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8L2ZvbnQ+PC9hPjxzcGFuIGNsYXNzPVwicXVvdGUtdGltZVwiPjxmb250IGNvbG9yPVwiZ3JleVwiPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnXFx0XFx0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnPC9mb250Pjwvc3Bhbj48L2Rpdj48ZGl2IGl0ZW1wcm9wPVwidGV4dFwiPidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBjb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzwvZGl2PjwvYmxvY2txdW90ZT4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSAnPHA+JyArIHJlc3VsdC5jb250ZW50ICsgJzwvcD4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1ldGEgPSAnPGJyPjxzbWFsbD48Zm9udCBjb2xvcj1cIicgKyB1c2VyQ29sb3IgKyAnXCI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgcmVzdWx0LnVzZXIubmlja25hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArICc8L2ZvbnQ+XFx0XFx0PGZvbnQgY29sb3I9XCJncmV5XCI+J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgdGltZURpZmYobm93VGltZSwgcmVzdWx0LmNyZWF0ZVRpbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAnXFx0XFx05Zue5aSNJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzwvZm9udD48L3NtYWxsPic7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29tbWVudENvbnRlbnQgPSBxdW90ZUNvbnRlbnQgKyBjb250ZW50ICsgbWV0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aXRsZSA9IGNvbW1lbnRDb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLzxpbWcgY2xhc3M9XCJhdmF0YXIoW1xcc1xcU10qPyk+L2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oPChwKShbXFxzXFxTXSo/KT4pfDxwPnw8XFwvcD4vZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2VXaXRoQ2FsbGJhY2soLzxpbWcgKHNyY3xkYXRhLXNyYyk9XCIoLio/KVwiKFtcXHNcXFNdKj8pPi9nLCBcIjxpbWcgZGF0YS12PlwiLCBpbWdUYWdSZXBsYWNlbWVudDIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLzxpbWcoW1xcc1xcU10qPyk+L2csIGltZ0Vycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC88c2hvd2ltZy9nLCAnPGltZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBNWV9VUkwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IGNvbFR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub01vcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiPHA+PC9wPlwiICsgJzxjZW50ZXI+PGZvbnQgY29sb3I9XCJncmV5XCI+5bey5peg5pu05aSa6K+E6K66PC9mb250PjwvY2VudGVyPicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IGNvbFR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHV0VmFyKHtrZXk6ICdub01vcmUnICsgZW50aXR5SWQsIHZhbHVlOiAxfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59IGVsc2Uge1xuICAgIHZhciBodG1sID0gZ2V0UmVzQ29kZSgpO1xudHJ5IHtcbiAgICB2YXIganMgPSBwYXJzZURvbShodG1sLCAnLm1haW4tY29udGVudCYmSHRtbCcpO1xuICAgIHZhciBoYXNSdWxlID0gMDtcblxuICAgIC8vIHNldEVycm9yKGh0bWwpO1xuXG4gICAgdHJ5IHtcblxuICAgICAgICBsZXQgdGl0bGUgPSAnPHA+PC9wPjxiaWcgc3R5bGU9XCJwYWRkaW5nLWxlZnQ6IDE1cHhcIj48c3Ryb25nPicgKyBwYXJzZURvbUZvckh0bWwoaHRtbCwgJy50b3BpYy1oZWFkZXItY2VudGVyJiZoMSYmSHRtbCcpICsgXCI8L3N0cm9uZz48L2JpZz5cIjtcbiAgICAgICAgbGV0IG1ldGEgPSAnJztcbiAgICAgICAgLy8gcGFyc2VEb21Gb3JIdG1sKGh0bWwsJy50b3BpYy1oZWFkZXItY2VudGVyJiYudG9waWMtbWV0YSYmSHRtbCcpXG4gICAgICAgIGxldCBjb3VudCA9ICc8c3BhbiBzdHlsZT1cImNvbG9yOiBncmV5XCI+JyArIHBhcnNlRG9tRm9ySHRtbChodG1sLCAnLnRvcGljLWhlYWRlci1jZW50ZXImJi50b3BpYy1oZWFkZXItcmlnaHQmJlRleHQnKSArIFwiPC9zcGFuPlwiO1xuXG4gICAgICAgIGlmIChzaG93TWV0YSkge1xuICAgICAgICAgICAgbGV0IG1ldGFJdGVtcyA9IHBhcnNlRG9tRm9yQXJyYXkoaHRtbCwgJy50b3BpYy1tZXRhJiYubWV0YS1pdGVtJyk7XG4gICAgICAgICAgICAvLyBzZXRFcnJvcihKU09OLnN0cmluZ2lmeShtZXRhSXRlbXMpKTtcbiAgICAgICAgICAgIGxldCBtZXRhTm9kZSA9IHBhcnNlRG9tRm9ySHRtbChtZXRhSXRlbXNbMl0sICdUZXh0Jyk7XG4gICAgICAgICAgICBtZXRhID0gJzxmb250IGNvbG9yPVwiZ3JleVwiPicgKyBwYXJzZURvbUZvckh0bWwobWV0YUl0ZW1zWzBdLCAnVGV4dCcpXG4gICAgICAgICAgICAgICAgKyAnICAnXG4gICAgICAgICAgICAgICAgKyBwYXJzZURvbUZvckh0bWwobWV0YUl0ZW1zWzFdLCAnVGV4dCcpXG4gICAgICAgICAgICAgICAgKyAnICAnXG4gICAgICAgICAgICAgICAgKyAnPC9mb250Pjxmb250IGNvbG9yPVwiJyArIG5vZGVDb2xvciArICdcIj4nICsgbWV0YU5vZGUgKyAnPC9mb250Pjxmb250IGNvbG9yPVwiZ3JleVwiPic7XG4gICAgICAgICAgICBsZXQgbWV0YVRhZ3MgPSBwYXJzZURvbUZvckFycmF5KCc8ZGl2PicgKyBtZXRhSXRlbXNbM10gKyAnPC9kaXY+JywgJ2RpdiYmLnRhZycpO1xuICAgICAgICAgICAgLy8gc2V0RXJyb3IoSlNPTi5zdHJpbmdpZnkobWV0YVRhZ3MpKTtcbiAgICAgICAgICAgIGxldCBtZXRhVGFnID0gJyc7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1ldGFUYWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbWV0YVRhZyA9IChtZXRhVGFnID09PSAnJyA/IG1ldGFUYWcgOiAobWV0YVRhZyArICcgICcpKVxuICAgICAgICAgICAgICAgICAgICArIHBhcnNlRG9tRm9ySHRtbChtZXRhVGFnc1tpXSwgJ1RleHQnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gbWV0YVRhZyA9IG1ldGFUYWcucmVwbGFjZSgn572u6aG2JywgJ+KAnOKAnOe9rumhtuKAneKAnScpO1xuICAgICAgICAgICAgbWV0YVNpemUgPSBtZXRhU2l6ZSA9PT0gJycgPyAnc21hbGwnIDogbWV0YVNpemU7XG4gICAgICAgICAgICBtZXRhID0gJzwnICsgbWV0YVNpemUgKyAnPicgKyBtZXRhICsgJyAgJyArIG1ldGFUYWcgKyAnPC9mb250PjwvJyArIG1ldGFTaXplICsgJz4nICsgJzxicj4nO1xuICAgICAgICAgICAgLy8gc2V0RXJyb3IobWV0YSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDwn5GN8J+Pu+KdpO+4j/Cfp6HimaHimaXwn5Ks8J+Rge+4j+Kev/CTgbpcbiAgICAgICAgaWYgKHVzZUVtb2ppKVxuICAgICAgICAgICAgY291bnQgPSBjb3VudC5yZXBsYWNlKFwi6I636LWe77yaXCIsIFwi4p2k77iPIFwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwi6K+E6K6677yaXCIsIFwi8J+SrCBcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZShcIuafpeeci++8mlwiLCBcIvCfkYHvuI8gXCIpO1xuXG4gICAgICAgIGxldCBoZWFkZXIgPSBcIlwiICsgdGl0bGUgKyAnXFx0PHNtYWxsPjxmb250IGNvbG9yPVwiZ3JleVwiPjxhIGhyZWY9XCInICsgTVlfVVJMICsgJ1wiPlvmn6XnnIvljp/mloddPC9hPjwvZm9udD48L3NtYWxsPicgKyBcIjxicj5cIiArIG1ldGEgKyBjb3VudCArICcnO1xuXG4gICAgICAgIGQucHVzaCh7XG4gICAgICAgICAgICB0aXRsZTogaGVhZGVyLFxuICAgICAgICAgICAgY29sX3R5cGU6IGNvbFR5cGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyOyBpKyspXG4gICAgICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZSdcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzaG93Q29udGVudCkge1xuICAgICAgICAgICAgbGV0IHRpdGxlID0gcGFyc2VEb21Gb3JIdG1sKGh0bWwsICcuY29udGVudCYmSHRtbCcpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2VXaXRoQ2FsbGJhY2soLzxpbWcgKHNyY3xkYXRhLXNyYyk9XCIoLio/KVwiKFtcXHNcXFNdKj8pPi9nLCBcIjxpbWcgZGF0YS12PlwiLCBpbWdUYWdSZXBsYWNlbWVudDIpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLzxpbWcoW1xcc1xcU10qPyk+L2csIGltZ0Vycm9yKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC88c2hvd2ltZy9nLCAnPGltZycpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLyg8KGRpdikoW1xcc1xcU10qPyk+KXw8ZGl2Pnw8XFwvZGl2Pi9nLCAnJyk7XG4gICAgICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIjxwPjwvcD5cIiArIHRpdGxlXG4gICAgICAgICAgICAgICAgLFxuICAgICAgICAgICAgICAgIGRlc2M6ICcnLFxuICAgICAgICAgICAgICAgIHVybDogJycsXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IGNvbFR5cGVcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVnRXhwID0gLyguKj8p77+lKC4qPynvv6UoLiopLztcbiAgICAgICAgaWYgKGpzLmluZGV4T2YoJz7mtbfpmJQnKSAhPT0gLTEpIHtcblxuICAgICAgICAgICAgLyppZiAoc2hvd0NvbnRlbnQpIHtcbiAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCAyOyBpKyspXG4gICAgICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZSdcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9Ki9cblxuICAgICAgICAgICAgbGV0IGNvbCA9IFwidGV4dF8xXCI7XG4gICAgICAgICAgICBsZXQgbGlzdCA9IGpzLm1hdGNoKC8+5rW36ZiUW1xcc1xcU10qPzxcXC8vZyk7XG4gICAgICAgICAgICBpZiAobGlzdCAhPSBudWxsICYmIGxpc3QubGVuZ3RoICE9PSAwKSBoYXNSdWxlID0gMTtcbiAgICAgICAgICAgIGlmIChsaXN0ICE9IG51bGwgJiYgbGlzdC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiPHA+PC9wPlwiICsgXCI8YmlnPjxiPuacrOaWh+aJgOacieinhOWImeS4gOmUruWvvOWFpTwvYj48L2JpZz5cIixcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IGNvbFR5cGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGlzdC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCB0aXRsZSA9IGxpc3Rbal0uc3BsaXQoJz4nKVsxXS5zcGxpdCgnPC8nKVswXTtcbiAgICAgICAgICAgICAgICBsZXQgbVRpdGxlID0gdGl0bGU7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVnRXhwLnRlc3QodGl0bGUpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbCA9IFwidGV4dF8zXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkgbVRpdGxlID0gXCLkuIDplK7lr7zlhaVcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3QubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmFyIHJlZ0V4cDEgPSAvKHRpdGxlXCI6XCIoLio/KVwiKXwoYmFzZTY0OlxcL1xcL0AoLio/KUApfCgoLio/KUApLztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldEVycm9yIChSZWdFeHAuJDIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtVGl0bGUgPSBSZWdFeHAuJDM7XG4gICAgICAgICAgICAgICAgICAgICAgICBtVGl0bGUgPSAobVRpdGxlICE9IG51bGwgJiYgbVRpdGxlICE9PSAnJykgPyBtVGl0bGUgOiB0aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoUmVnRXhwLiQyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImhvbWVfcnVsZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvdGl0bGVcIjpcIiguKj8pXCIvLnRlc3QobVRpdGxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbVRpdGxlID0gUmVnRXhwLiQxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaG9tZV9ydWxlX3YyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9iYXNlNjQ6XFwvXFwvQCguKj8pQC8udGVzdChtVGl0bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtVGl0bGUgPSBSZWdFeHAuJDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJqc191cmxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyguKj8pQC8udGVzdChtVGl0bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtVGl0bGUgPSBSZWdFeHAuJDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJob21lX3J1bGVfdXJsXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1UaXRsZSA9IFwi6aaW6aG15ZCI6ZuGXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJib29rbWFya191cmxcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbVRpdGxlID0gXCLkuabnrb7lkIjpm4ZcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGl0bGUgPSAobVRpdGxlICE9IG51bGwgJiYgbVRpdGxlICE9PSAnJykgPyBtVGl0bGUgOiB0aXRsZTtcbiAgICAgICAgICAgICAgICBpZiAodGl0bGUubGVuZ3RoID4gMTQpIGNvbCA9IFwidGV4dF8yXCI7XG5cbiAgICAgICAgICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6ICfwn5SU4oCY4oCY4oCZ4oCZPGI+IOeCueWHu+WvvOWFpSA8L2I+8J+UlCcsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ3J1bGU6Ly8nICsgYmFzZTY0RW5jb2RlKGRlY29kZVVSSUNvbXBvbmVudChsaXN0W2pdLnNwbGl0KCc+JylbMV0uc3BsaXQoJzwvJylbMF0ucmVwbGFjZSgvYW1wOy9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8mbHQ7L2csICc8JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8mZ3Q7L2csICc+JykpKSxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IGNvbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2VcbiAgICAgICAgaWYgKGpzLmluZGV4T2YoJzxjb2RlPuaWueWchicpICE9PSAtMSkge1xuXG4gICAgICAgICAgICAvKmlmIChzaG93Q29udGVudCkge1xuICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IDI7IGkrKylcbiAgICAgICAgICAgIGQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0qL1xuXG4gICAgICAgICAgICBsZXQgbGlzdCA9IGpzLm1hdGNoKC88Y29kZT7mlrnlnIZbXFxzXFxTXSo/PFxcL2NvZGUvZyk7XG5cbiAgICAgICAgICAgIGlmIChsaXN0ICE9IG51bGwgJiYgbGlzdC5sZW5ndGggIT09IDApIGhhc1J1bGUgPSAxO1xuICAgICAgICAgICAgaWYgKGxpc3QgIT0gbnVsbCAmJiBsaXN0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCI8cD48L3A+XCIgKyBcIjxiaWc+PGI+5pys5paH5omA5pyJ6KeE5YiZ5LiA6ZSu5a+85YWlPC9iPjwvYmlnPlwiLFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogY29sVHlwZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxpc3QubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgdGl0bGUgPSBwYXJzZURvbUZvckh0bWwobGlzdFtqXSwgJ2NvZGUmJlRleHQnKTtcbiAgICAgICAgICAgICAgICBsZXQgbVRpdGxlID0gdGl0bGU7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVnRXhwLnRlc3QodGl0bGUpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbCA9IFwidGV4dF8zXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkgbVRpdGxlID0gXCLkuIDplK7lr7zlhaVcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3QubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbVRpdGxlID0gUmVnRXhwLiQzO1xuICAgICAgICAgICAgICAgICAgICAgICAgbVRpdGxlID0gKG1UaXRsZSAhPSBudWxsICYmIG1UaXRsZSAhPT0gJycpID8gbVRpdGxlIDogdGl0bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKFJlZ0V4cC4kMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzb3VyY2VcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL3RpdGxlXCI6XCIoLio/KVwiLy50ZXN0KG1UaXRsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1UaXRsZSA9IFJlZ0V4cC4kMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGl0bGUgPSAobVRpdGxlICE9IG51bGwgJiYgbVRpdGxlICE9PSAnJykgPyBtVGl0bGUgOiB0aXRsZTtcblxuICAgICAgICAgICAgICAgIGQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+eCueWHu+WvvOWFpScsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ3J1bGU6Ly8nICsgYmFzZTY0RW5jb2RlKGRlY29kZVVSSUNvbXBvbmVudChsaXN0W2pdLnNwbGl0KCc+JylbMV0uc3BsaXQoJzwvJylbMF0ucmVwbGFjZSgvYW1wOy9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8mbHQ7L2csICc8JylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8mZ3Q7L2csICc+JykpKSxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IGNvbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodG9rZW4gIT09ICcnKSB7XG4gICAgICAgICAgICBsZXQgc3Rhckljb24gPSBzdGFySWNvbnNbMF07XG4gICAgICAgICAgICBsZXQgbGlrZUljb24gPSBsaWtlSWNvbnNbMF07XG4gICAgICAgICAgICBsZXQgY29tbWVudEljb24gPSBjb21tZW50SWNvbnNbMF07XG4gICAgICAgICAgICAvLyBsZXQgYXJ0aWNsZUljb24gPSBhcnRpY2xlSWNvbnNbMF07XG4gICAgICAgICAgICBsZXQgc3Rhckljb25NYXggPSBzdGFySWNvbnMubGVuZ3RoLTE7XG4gICAgICAgICAgICBsZXQgbGlrZUljb25NYXggPSBsaWtlSWNvbnMubGVuZ3RoLTE7XG4gICAgICAgICAgICBsZXQgY29tbWVudEljb25NYXggPSBjb21tZW50SWNvbnMubGVuZ3RoLTE7XG4gICAgICAgICAgICAvLyBsZXQgYXJ0aWNsZUljb25NYXggPSBhcnRpY2xlSWNvbnMubGVuZ3RoLTE7XG4gICAgICAgICAgICBpZiAoaWNvbkluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGxldCBtYXhMZW4gPSBNYXRoLm1heChzdGFySWNvbk1heCwgbGlrZUljb25NYXgsIGNvbW1lbnRJY29uTWF4LyosIGFydGljbGVJY29uTWF4Ki8pO1xuICAgICAgICAgICAgICAgIGljb25JbmRleCA9IE1hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkgKiAobWF4TGVuICsgMSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXJJY29uID0gc3Rhckljb25zW2ljb25JbmRleCA+IHN0YXJJY29uTWF4ID8gc3Rhckljb25NYXggOiBpY29uSW5kZXhdO1xuICAgICAgICAgICAgbGlrZUljb24gPSBsaWtlSWNvbnNbaWNvbkluZGV4ID4gbGlrZUljb25NYXggPyBsaWtlSWNvbk1heCA6IGljb25JbmRleF07XG4gICAgICAgICAgICBjb21tZW50SWNvbiA9IGNvbW1lbnRJY29uc1tpY29uSW5kZXggPiBjb21tZW50SWNvbk1heCA/IGNvbW1lbnRJY29uTWF4IDogaWNvbkluZGV4XTtcbiAgICAgICAgICAgIC8vIGFydGljbGVJY29uID0gYXJ0aWNsZUljb25zW2ljb25JbmRleCA+IGFydGljbGVJY29uTWF4ID8gYXJ0aWNsZUljb25NYXggOiBpY29uSW5kZXhdO1xuICAgICAgICAgICAgbGV0IGlzU3RhcnJlZCA9IDA7XG4gICAgICAgICAgICBsZXQgc3RhclN0YXR1cyA9ICcnO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzdGFyU3RhdHVzID0gcGFyc2VEb21Gb3JIdG1sKGh0bWwsIFwiLmZhdm9yaXRlLmFjdGl2ZSYmSHRtbFwiKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBzdGFyU3RhdHVzID0gJydcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGFyU3RhdHVzICE9PSAnJykgaXNTdGFycmVkID0gMTtcbiAgICAgICAgICAgIC8vIHNldEVycm9yKHN0YXJTdGF0dXMpO1xuICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkLnB1c2goeyAvLyAgdGV4dF9jZW50ZXJfMSBpY29uX3NtYWxsXzNcbiAgICAgICAgICAgICAgICB0aXRsZTogaXNTdGFycmVkID09PSAwID8gJ+aUtuiXjycgOiAn5bey5pS26JePJyxcbiAgICAgICAgICAgICAgICBwaWNfdXJsOiBzdGFySWNvbixcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2ljb25fc21hbGxfMycsXG4gICAgICAgICAgICAgICAgdXJsOiBtVXJsICsgJyMnICsgdG9rZW4gKyAnIycgKyByZXN1bHRUaXBzICsgJyMnICsgaXNTdGFycmVkICsgYEBsYXp5UnVsZT0uanM6IHZhciB1cmxTcGxpdHM9aW5wdXQuc3BsaXQoJyMnKTt2YXIgbVVybD11cmxTcGxpdHNbMF07IHZhciB0b2tlbj11cmxTcGxpdHNbMV07dmFyIHJlc3VsdFRpcHM9cGFyc2VJbnQodXJsU3BsaXRzWzJdKTt2YXIgaXNTdGFycmVkPXBhcnNlSW50KHVybFNwbGl0c1szXSk7bGV0IG1lc3NhZ2UgPSAnJztpZiAoXFwvdG9waWNcXFxcLyhcXFxcZCspLy50ZXN0KG1VcmwpID09PSB0cnVlKXtsZXQgZW50aXR5SWQgPSBSZWdFeHAuJDE7aWYgKGVudGl0eUlkICE9IG51bGwgJiYgZW50aXR5SWQgIT09IFwiXCIpIHtsZXQgc3RhclVybD0naHR0cHM6XFwvXFwvaGFpa3Vvc2hpamllLmNuXFwvYXBpXFwvdG9waWNcXC9mYXZvcml0ZVxcLycrZW50aXR5SWQ7aWYoaXNTdGFycmVkKXtzdGFyVXJsPSdodHRwczpcXC9cXC9oYWlrdW9zaGlqaWUuY25cXC9hcGlcXC9mYXZvcml0ZVxcL2RlbGV0ZT9lbnRpdHlUeXBlPXRvcGljJmVudGl0eUlkPScrZW50aXR5SWQ7fSBsZXQgb3B0aW9ucz17aGVhZGVyczp7J1gtVXNlci1Ub2tlbic6IHRva2VufSxib2R5OiAnJywgbWV0aG9kOiAnR0VUJ307LypzZXRFcnJvciAob3B0aW9ucyk7Ki9sZXQgc3RhclJlc3VsdD1mZXRjaChzdGFyVXJsLCBvcHRpb25zKTsvKnNldEVycm9yIChzdGFyUmVzdWx0KTsqL2lmKHJlc3VsdFRpcHMpe3N0YXJSZXN1bHQ9SlNPTi5wYXJzZShzdGFyUmVzdWx0KTttZXNzYWdlPXN0YXJSZXN1bHQubWVzc2FnZTtpZihzdGFyUmVzdWx0Lm1lc3NhZ2U9PT0nJyl7aWYoc3RhclJlc3VsdC5zdWNjZXNzPT09dHJ1ZSl7bWVzc2FnZT1pc1N0YXJyZWQ9PT0xPyflt7Llj5bmtojmlLbol48nOifmlLbol4/miJDlip8nOyByZWZyZXNoUGFnZShmYWxzZSk7fX0gZWxzZSBpZiAoc3RhclJlc3VsdC5tZXNzYWdlID09PSAn6K+35YWI55m75b2VJykge2xldCB0b2tlbkZpbGUgPSAnaGlrZXI6XFwvXFwvZmlsZXNcXC9ydWxlc1xcL2pzXFwvaGlrZXJiYnNfdG9rZW4uanMnO3dyaXRlRmlsZSh0b2tlbkZpbGUsICcnKTttZXNzYWdlID0gJ+ivt+mHjeaWsOiuv+mXruS4gOasoeiuuuWdm+e9kemhteiOt+WPlueZu+W9leS/oeaBryc7fSBtZXNzYWdlPSd0b2FzdDpcXC9cXC8nK21lc3NhZ2U7fX19bWVzc2FnZWBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZC5wdXNoKHsgLy8gIHRleHRfY2VudGVyXzEgaWNvbl9zbWFsbF8zXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfngrnotZ4nLFxuICAgICAgICAgICAgICAgIHBpY191cmw6IGxpa2VJY29uLFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnaWNvbl9zbWFsbF8zJyxcbiAgICAgICAgICAgICAgICB1cmw6IG1VcmwgKyAnIycgKyB0b2tlbiArICcjJyArIHJlc3VsdFRpcHMgKyBgQGxhenlSdWxlPS5qczogdmFyIHVybFNwbGl0cz1pbnB1dC5zcGxpdCgnIycpO3ZhciBtVXJsPXVybFNwbGl0c1swXTsgdmFyIHRva2VuPXVybFNwbGl0c1sxXTt2YXIgcmVzdWx0VGlwcz1wYXJzZUludCh1cmxTcGxpdHNbMl0pO2xldCBtZXNzYWdlID0gJyc7aWYgKFxcL3RvcGljXFxcXC8oXFxcXGQrKS8udGVzdChtVXJsKSA9PT0gdHJ1ZSl7bGV0IGVudGl0eUlkID0gUmVnRXhwLiQxO2lmIChlbnRpdHlJZCAhPSBudWxsICYmIGVudGl0eUlkICE9PSBcIlwiKSB7bGV0IGxpa2VVcmw9J2h0dHBzOlxcL1xcL2hhaWt1b3NoaWppZS5jblxcL2FwaVxcL3RvcGljXFwvbGlrZVxcLycrZW50aXR5SWQ7IGxldCBvcHRpb25zPXtoZWFkZXJzOnsnWC1Vc2VyLVRva2VuJzogdG9rZW59LGJvZHk6ICcnLCBtZXRob2Q6ICdQT1NUJ307LypzZXRFcnJvciAob3B0aW9ucyk7Ki9sZXQgbGlrZVJlc3VsdD1mZXRjaChsaWtlVXJsLCBvcHRpb25zKTsvKnNldEVycm9yIChsaWtlUmVzdWx0KTsqL2lmKHJlc3VsdFRpcHMpe2xpa2VSZXN1bHQ9SlNPTi5wYXJzZShsaWtlUmVzdWx0KTttZXNzYWdlPWxpa2VSZXN1bHQubWVzc2FnZTtpZihsaWtlUmVzdWx0Lm1lc3NhZ2U9PT0nJyl7aWYobGlrZVJlc3VsdC5zdWNjZXNzPT09dHJ1ZSltZXNzYWdlPSfngrnotZ7miJDlip8nO3JlZnJlc2hQYWdlKGZhbHNlKTt9IGVsc2UgaWYgKGxpa2VSZXN1bHQubWVzc2FnZSA9PT0gJ+ivt+WFiOeZu+W9lScpIHtsZXQgdG9rZW5GaWxlID0gJ2hpa2VyOlxcL1xcL2ZpbGVzXFwvcnVsZXNcXC9qc1xcL2hpa2VyYmJzX3Rva2VuLmpzJzt3cml0ZUZpbGUodG9rZW5GaWxlLCAnJyk7bWVzc2FnZSA9ICfor7fph43mlrDorr/pl67kuIDmrKHorrrlnZvnvZHpobXojrflj5bnmbvlvZXkv6Hmga8nO30gbWVzc2FnZT0ndG9hc3Q6XFwvXFwvJyttZXNzYWdlO319fW1lc3NhZ2VgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGQucHVzaCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6ICflm57lpI0nLFxuICAgICAgICAgICAgICAgIHBpY191cmw6IGNvbW1lbnRJY29uLFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnaWNvbl9zbWFsbF8zJyxcbiAgICAgICAgICAgICAgICB1cmw6IG1VcmxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLypkLnB1c2goe1xuICAgICAgICAgICAgICAgIHRpdGxlOiAn5Y6f5paHJyxcbiAgICAgICAgICAgICAgICBwaWNfdXJsOiBhcnRpY2xlSWNvbixcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2ljb25fc21hbGxfMycsXG4gICAgICAgICAgICAgICAgdXJsOiBtVXJsXG4gICAgICAgICAgICB9KTsqL1xuICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2hvd0lucHV0VG9rZW5UaXBzKSB7XG4gICAgICAgICAgICAgICAgbGV0IHBsdWdpbkxhdGVzdCA9ICfmtbfpmJTop4bnlYzop4TliJnliIbkuqvvvIzlvZPliY3liIbkuqvnmoTmmK/vvJrnvZHpobXmj5Lku7bvvIxSZWJvcm7vv6Vqc191cmzvv6VoYWlrdW9zaGlqaWUuY25f6I635Y+W55So5oi3VG9rZW5AYmFzZTY0Oi8vS0daMWJtTjBhVzl1SUNncElIc0tJQ0FnSUM4djVMdU81TGlMNloyaTVMaUE2S0dNNWJ5QTVhZUw1WWFaNUx1ajU2Q0JDZ29nSUNBZ0wzVnpaWEpVYjJ0bGJqMG9XMkV0ZWtFdFdqQXRPVjBxS1RzcUx5NTBaWE4wS0dSdlkzVnRaVzUwTG1OdmIydHBaU2s3Q2lBZ0lDQXZMMkZzWlhKMEtHUnZZM1Z0Wlc1MExtTnZiMnRwWlNzaTRvQ21JaXRTWldkRmVIQXVKREVwT3dvS0lDQWdJQzh2SUdaNVgySnlhV1JuWlY5aGNIQXVjSFYwVm1GeUtDSm9hV3RsY21KaWMxOTBiMnRsYmlJc1VtVm5SWGh3TGlReEtUc0tJQ0FnSUdaNVgySnlhV1JuWlY5aGNIQXVkM0pwZEdWR2FXeGxLQ2RvYVd0bGNqb3ZMMlpwYkdWekwzSjFiR1Z6TDJwekwyaHBhMlZ5WW1KelgzUnZhMlZ1TG1wekp5d2dVbVZuUlhod0xpUXhLVHNLQ24wcEtDazcnO1xuICAgICAgICAgICAgICAgIGxldCBwbHVnaW5VcmwgPSAnaGlrZXI6Ly9maWxlcy9ydWxlcy9qcy9oYWlrdW9zaGlqaWUuY25f6I635Y+W55So5oi3VG9rZW4uanMnO1xuICAgICAgICAgICAgICAgIGxldCBwbHVnaW4gPSAnJztcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBwbHVnaW4gPSBmZXRjaChwbHVnaW5VcmwsIHt9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBsdWdpbiA9PSBudWxsKSBwbHVnaW4gPSAnJztcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbiA9Jyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBwbHVnaW5VcGRhdGUgPSAwO1xuICAgICAgICAgICAgICAgIGlmIChwbHVnaW4gIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbHVnaW5MYXRlc3Quc3BsaXQoJ2Jhc2U2NDpcXC9cXC8nKVsxXSAhPT0gYmFzZTY0RW5jb2RlKHBsdWdpbikucmVwbGFjZSgvXFxuL2csICcnKSkgcGx1Z2luVXBkYXRlID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiPHA+PC9wPlwiICsgJzxzbWFsbD48Zm9udCBjb2xvcj1cImdyZXlcIj4nICsgICflpoLpnIDmlLbol4/miJbngrnotZ7lip/og73vvIzpnIDnmbvlvZXorrrlnZvlkI7miafooYzku6XkuIvmraXpqqTojrflj5YgVG9rZW7vvJo8YnI+W+acrOaPkOekuuWPr+e8lui+keinhOWImeWFs+mXrV08YnI+MS4gJyArICgocGx1Z2luID09PSAnJyB8fCBwbHVnaW5VcGRhdGUgPT09IDEpID8gJ+eCueWHu+S4i+aWueWPo+S7pOS7o+eggScgKyAocGx1Z2luVXBkYXRlID09PSAxID8gJzxiPuabtOaWsOaPkuS7tjwvYj4nIDogJ+WvvOWFpeS4k+eUqOaPkuS7ticpICsgJ++8jOeEtuWQjicgOiAn5L2g5bey5a+85YWl5pyA5paw5LiT55So5o+S5Lu277yM5Y+q6ZyAJykgKyAnPGEgaHJlZj1cIicgKyBNWV9VUkwgKyAnXCI+W+afpeeci+WOn+aWh108L2E+5LiA5qyh5YaN6L+U5Zue5Yi35pawJyArICgocGx1Z2luID09PSAnJyB8fCBwbHVnaW5VcGRhdGUgPT09IDEpID8gJzxicj48cHJlPjxjb2RlPicgKyBwbHVnaW5MYXRlc3QgKyAnPC9jb2RlPjwvcHJlPicgOiAnJykgKyBcIjwvZm9udD48L3NtYWxsPlwiLFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogY29sVHlwZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNob3dDb21tZW50KSB7XG4gICAgICAgICAgICAvKmlmIChoYXNSdWxlKSB7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgMjsgaSsrKVxuICAgICAgICAgICAgZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSovXG5cbiAgICAgICAgICAgIC9jdXJzb3I6XCIoLio/KVwiLy50ZXN0KGh0bWwpO1xuICAgICAgICAgICAgbGV0IGN1cnNvclRlbXAgPSBSZWdFeHAuJDE7XG4gICAgICAgICAgICBsZXQgY3Vyc29yID0gKGN1cnNvclRlbXAgIT0gbnVsbCAmJiBjdXJzb3JUZW1wICE9PSAnJykgPyBjdXJzb3JUZW1wIDogJzAnO1xuICAgICAgICAgICAgcHV0VmFyKHtrZXk6ICdjdXJzb3InLCB2YWx1ZTogY3Vyc29yfSk7XG4gICAgICAgICAgICBwdXRWYXIoe2tleTogJ2ZpcnN0X3BhZ2VfY3Vyc29yJywgdmFsdWU6IGN1cnNvcn0pO1xuXG4gICAgICAgICAgICBkLnB1c2goe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIjxwPjwvcD5cIiArIFwiPGJpZz48Yj5cIiArIHBhcnNlRG9tRm9ySHRtbChodG1sLCAnLmNvbW1lbnQtdGl0bGUmJkh0bWwnKSArIFwiPC9iPjwvYmlnPlwiLFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBjb2xUeXBlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBwbCA9IHBhcnNlRG9tKGh0bWwsICcuY29tbWVudHMmJkh0bWwnKVxuICAgICAgICAgICAgICAgIC5tYXRjaCgvPGxpW1xcc1xcU10qPzxcXC9saS9nKTtcbiAgICAgICAgICAgIGlmIChwbCA9PSBudWxsIHx8IHBsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIjxwPjwvcD5cIiArICc8Zm9udCBjb2xvcj1cImdyZXlcIj7mmoLml6Dor4Torro8L2ZvbnQ+JyxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IGNvbFR5cGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwbC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAvLyAvKDwoZGl2fHApKFtcXHNcXFNdKj8pPil8PGRpdj58PHA+fDxcXC9kaXY+fDxcXC9wPi9nXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb21tZW50Q29udGVudCA9IHBhcnNlRG9tRm9ySHRtbChwbFtqXSwgJy5jb21tZW50LWNvbnRlbnQmJkh0bWwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLzxpbWcgY2xhc3M9XCJhdmF0YXIoW1xcc1xcU10qPyk+L2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyg8KHApKFtcXHNcXFNdKj8pPil8PHA+fDxcXC9wPi9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlV2l0aENhbGxiYWNrKC88aW1nIChzcmN8ZGF0YS1zcmMpPVwiKC4qPylcIihbXFxzXFxTXSo/KT4vZywgXCI8aW1nIGRhdGEtdj5cIiwgaW1nVGFnUmVwbGFjZW1lbnQyKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLzxpbWcoW1xcc1xcU10qPyk+L2csIGltZ0Vycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLzxzaG93aW1nL2csICc8aW1nJyk7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29tbWVudFJlcGx5VGV4dCA9IHBhcnNlRG9tRm9ySHRtbChwbFtqXSwgJy5jb21tZW50LXF1b3RlJiZIdG1sJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29tbWVudFF1b3RlVXNlcm5hbWUgPSBwYXJzZURvbUZvckh0bWwoY29tbWVudFJlcGx5VGV4dCwgXCIucXVvdGUtbmlja25hbWUmJkh0bWxcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29tbWVudFF1b3RlVGltZSA9IHBhcnNlRG9tRm9ySHRtbChjb21tZW50UmVwbHlUZXh0LCBcIi5xdW90ZS10aW1lJiZIdG1sXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudFJlcGx5VGV4dCA9IGNvbW1lbnRSZXBseVRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvPGFbXFxzXFxTXS4qPzxcXC9hPi9nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29tbWVudFJlcGx5VGV4dEFycmF5ID0gY29tbWVudFJlcGx5VGV4dC5tYXRjaCgvPHBbXFxzXFxTXS4qPzxcXC9wPi9nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRDb250ZW50ID0gYWJicmV2aWF0ZVJlcGx5VGV4dChjb21tZW50Q29udGVudCwgY29tbWVudFJlcGx5VGV4dEFycmF5KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKGNvbW1lbnRRdW90ZVVzZXJuYW1lLCAnPGZvbnQgY29sb3I9XCInICsgcXVvdGVVc2VyQ29sb3IgKyAnXCI+JyArIGNvbW1lbnRRdW90ZVVzZXJuYW1lICsgJzwvZm9udD4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKGNvbW1lbnRRdW90ZVRpbWUsICc8Zm9udCBjb2xvcj1cImdyZXlcIj4nICsgY29tbWVudFF1b3RlVGltZSArICc8L2ZvbnQ+Jyk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goeyAvLyBwLC0yXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCI8cD48L3A+XCIgKyBjb21tZW50Q29udGVudCArICc8YnI+PHNtYWxsPicgKyBwYXJzZURvbUZvckh0bWwocGxbal0sICcuY29tbWVudC1uaWNrbmFtZSYmSHRtbCcpLnJlcGxhY2UoLzxhW1xcc1xcU10uKj8+L2csICc8Zm9udCBjb2xvcj1cIicgKyB1c2VyQ29sb3IgKyAnXCI+JykucmVwbGFjZSgvPFxcL2E+L2csIFwiPC9mb250PlwiKSArICdcXHRcXHQ8Zm9udCBjb2xvcj1cImdyZXlcIj4nICsgcGFyc2VEb21Gb3JIdG1sKHBsW2pdLCAnLmNvbW1lbnQtbWV0YS0tc3BhbiYmVGV4dCcpICsgJzwvZm9udD48L3NtYWxsPicsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogTVlfVVJMLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IGNvbFR5cGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHt9XG59IGNhdGNoIChlKSB7XG5kLnB1c2goe1xudGl0bGU6ICc8cCBzdHlsZT1cInRleHQtYWxpZ246IGNlbnRlcjtcIj7or6XpobXpnaLml6Dms5Xop6PmnpDmiJbor53popjkuI3lrZjlnKg8L3A+PHAgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXI7XCI+PGEgaHJlZj1cIicgKyBNWV9VUkwgKydcIj7mn6XnnIvljp/mloc8L2E+PC9wPicsXG5jb2xfdHlwZTogJ3JpY2hfdGV4dCdcbn0pXG59XG59XG5cbnJlcy5kYXRhID0gZDtcbnNldEhvbWVSZXN1bHQocmVzKTsiLCJzZGV0YWlsX2NvbF90eXBlIjoibW92aWVfMSIsInNkZXRhaWxfZmluZF9ydWxlIjoiKiIsInVhIjoibW9iaWxlIiwicHJlUnVsZSI6Ii8qKlxuICog6YCa6L+H5o+S5Lu26Ieq5Yqo6I635Y+WIFRva2VuIOWIsOaWh+S7tuS4reeEtuWQjuiHquWKqOivu+WPllxuICpcbiAqIOazqOaEj++8muS7peS4iuaWueeahCB0b2tlbiDkuLrkuLtcbiAqL1xudmFyIGZpbGVUb2tlbiA9ICcnO1xudHJ5IHtcbiAgICBmaWxlVG9rZW4gPSBmZXRjaCAoJ2hpa2VyOi8vZmlsZXMvcnVsZXMvanMvaGlrZXJiYnNfdG9rZW4uanMnLCB7fSk7XG4gICAgaWYgKGZpbGVUb2tlbiA9PSBudWxsKSBmaWxlVG9rZW4gPSAnJztcbn0gY2F0Y2ggKGUpIHtcbiAgICBmaWxlVG9rZW4gPSAnJztcbn1cbnB1dFZhcjIoJ2hpa2VyX3Rva2VuJywgZmlsZVRva2VuKTsifQ=="
    },
    {
      "title": "预告片•Re",
      "author": "Reborn",
      "version": 1,
      "updateText": "",
      "tips": "",
      "rule": "rule://5rW36ZiU6KeG55WM6KeE5YiZ5YiG5Lqr77yM5b2T5YmN5YiG5Lqr55qE5piv77ya6aaW6aG16aKR6YGT77yMUmVib3Ju77+laG9tZV9ydWxl77+leyJ0aXRsZSI6IumihOWRiueJh+KAolJlIiwiYXV0aG9yIjoiUmVib3JuIiwidXJsIjoiaHR0cHM6Ly93d3cueXVnYW9waWFuLmNuL21vdmxpc3QvZnlhcmVhX2Z5Y2xhc3NfZnl5ZWFyX19meXBhZ2UiLCJ2ZXJzaW9uIjoxLCJjb2xfdHlwZSI6Im1vdmllXzMiLCJjbGFzc19uYW1lIjoi5YWo6YOoJuWJp+aDhSbllpzliacm5oOK5oKaJueIseaDhSbliqjkvZwm54qv572qJuWGkumZqSbmgqznlpEm5aWH5bm7JuenkeW5uybmgZDmgJYm5a625bqtJuWKqOeUuybnuqrlvZXniYcm5Y6G5Y+yJuS8oOiusCbmiJjkuokm5ZCM5oCnJumfs+S5kCbmrYzoiJ4m6KW/6YOoJueBvumavibmrabkvqAm5oOF6ImyIiwiY2xhc3NfdXJsIjoiJuWJp+aDhSbllpzliacm5oOK5oKaJueIseaDhSbliqjkvZwm54qv572qJuWGkumZqSbmgqznlpEm5aWH5bm7JuenkeW5uybmgZDmgJYm5a625bqtJuWKqOeUuybnuqrlvZXniYcm5Y6G5Y+yJuS8oOiusCbmiJjkuokm5ZCM5oCnJumfs+S5kCbmrYzoiJ4m6KW/6YOoJueBvumavibmrabkvqAm5oOF6ImyIiwiYXJlYV9uYW1lIjoi5YWo6YOoJue+juWbvSbkuK3lm73lpKfpmYYm6Iux5Zu9JuazleWbvSbpppnmuK8m5Y+w5rm+JuaXpeacrCbpn6nlm70m5rOw5Zu9JuW+t+WbvSbliqDmi7/lpKcm5r6z5aSn5Yip5LqaJuilv+ePreeJmSbmhI/lpKfliKkm5Y2w5bqmJuavlOWIqeaXtibkv4TnvZfmlq8m6JGh6JCE54mZIiwiYXJlYV91cmwiOiIm576O5Zu9JuS4reWbveWkp+mZhiboi7Hlm70m5rOV5Zu9Jummmea4ryblj7Dmub4m5pel5pysJumfqeWbvSbms7Dlm70m5b635Zu9JuWKoOaLv+WkpybmvrPlpKfliKnkupom6KW/54+t54mZJuaEj+Wkp+WIqSbljbDluqYm5q+U5Yip5pe2JuS/hOe9l+aWrybokaHokITniZkiLCJ5ZWFyX25hbWUiOiLlhajpg6gmMjAyMCYyMDE5JjIwMTgmMjAxNyYyMDE2JjIwMTUmMjAxNCYyMDEzJjIwMTImMjAxMSYyMDEwJjIwMDkmMjAwOCIsInllYXJfdXJsIjoiJjIwMjAmMjAxOSYyMDE4JjIwMTcmMjAxNiYyMDE1JjIwMTQmMjAxMyYyMDEyJjIwMTEmMjAxMCYyMDA5JjIwMDgiLCJmaW5kX3J1bGUiOiIubW92bGlzdCwxJiZsaTsuaXRlbS10aXRsZSYmVGV4dDtpbWcmJnNyYzsuaXRlbS1wdWJ0aW1lJiZUZXh0O2EmJmhyZWYuanM6J2h0dHA6Ly9tLnl1Z2FvcGlhbi5jbi8/dmlldz1tb3ZpZSZpZD0nK2lucHV0LnJlcGxhY2UoJy9tb3ZpZS8nLCcnKSIsInNlYXJjaF91cmwiOiJodHRwOi8vbS55dWdhb3BpYW4uY24vP3ZpZXc9bGlzdCZsaXN0dHlwZT1tb3ZsaXN0JnBhZ2U9ZnlwYWdlJmtleXdvcmQ9KioiLCJ0aXRsZUNvbG9yIjoiIzAwMzQ3MiIsImdyb3VwIjoiKu+4j+KDo+efreinhumikeWFjeWXheaOoiIsInNlYXJjaEZpbmQiOiIubW92bGlzdCYmbGk7aDImJlRleHQ7YSYmaHJlZjtwJiZUZXh0Oyo7aW1nJiZzcmMiLCJkZXRhaWxfY29sX3R5cGUiOiJwaWNfMSIsImRldGFpbF9maW5kX3J1bGUiOiJqczpcbnZhciByZXMgPSB7fTtcbnZhciByZXN1bHQgPSBbXTtcbnZhciBodG1sID0gZmV0Y2goZ2V0VXJsKCksIHt9KTtcbi8vc2V0RXJyb3IoZ2V0UnVsZSgpKTtcbnJlc3VsdC5wdXNoKHtcbiAgICB0aXRsZTogcGFyc2VEb20oaHRtbCwgXCIubW92aWUtaW5mbyYmcCYmVGV4dFwiKS5yZXBsYWNlKGdldFVybCgpK1wiL1wiLCBcIlwiKStcIlxcbijngrnlh7vlm77niYflj6/orr/pl67mupDnvZHpobUpXCIsXG4gICAgcGljX3VybDogcGFyc2VEb20oaHRtbCwgXCIubW92aWUtaW5mbyYmYSYmaW1nJiZzcmNcIiksXG4gICAgdXJsOiBnZXRVcmwoKSxcbiAgICBkZXNjOiAgcGFyc2VEb20oaHRtbCwgXCIucGxheWVyLWRldGFpbCYmcCYmVGV4dFwiKS5yZXBsYWNlKGdldFVybCgpK1wiL1wiLCBcIlwiKSxcbn0pO1xuXG52YXIgdmlkZW9MaXN0SHRtbCA9IHBhcnNlRG9tKGh0bWwsIFwiLnZpZGVvbGlzdC13cmFwcGVyJiZIdG1sXCIpO1xudmFyIHZpZGVvVGl0bGVzID0gdmlkZW9MaXN0SHRtbC5tYXRjaCgvPGgyW1xcc1xcU10qPzxcXC9oMj4vZyk7XG52YXIgdmlkZW9MaW5rc0FyciA9IHZpZGVvTGlzdEh0bWwubWF0Y2goLzx1bFtcXHNcXFNdKj88XFwvdWw+L2cpO1xuXG5mb3IodmFyIGkgPSAwOyBpIDwgdmlkZW9UaXRsZXMubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHQucHVzaCh7XG4gICAgICAgIHRpdGxlOiBwYXJzZURvbSh2aWRlb1RpdGxlc1tpXSwgXCJoMiYmVGV4dFwiKS5yZXBsYWNlKGdldFVybCgpK1wiL1wiLCBcIlwiKSxcbiAgICAgICAgY29sX3R5cGU6IFwidGV4dF8xXCJcbiAgICB9KTtcbiAgICB2YXIgdmlkZW9MaW5rcyA9IHZpZGVvTGlua3NBcnJbaV0ubWF0Y2goLzxsaVtcXHNcXFNdKj88XFwvbGk+L2cpO1xuLy9zZXRFcnJvcihKU09OLnN0cmluZ2lmeSh2aWRlb0xpbmtzKSk7XG4vL3NldEVycm9yKHZpZGVvTGlua3NbMF0ucmVwbGFjZShcIi4vP1wiLCBcIi8/XCIpKTtcbi8vc2V0RXJyb3IocGFyc2VEb20odmlkZW9MaW5rc1swXS5yZXBsYWNlKFwiLi8/XCIsIFwiLz9cIiksIFwibGkmJmEmJmhyZWZcIikpO1xuICAgIGZvcih2YXIgaiA9IDA7IGogPCB2aWRlb0xpbmtzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIHRpdGxlOiBwYXJzZURvbSh2aWRlb0xpbmtzW2pdLCBcImxpJiZUZXh0XCIpLnJlcGxhY2UoZ2V0VXJsKCkrXCIvXCIsIFwiXCIpLFxuICAgICAgICAgICAgdXJsOiBwYXJzZURvbSh2aWRlb0xpbmtzW2pdLnJlcGxhY2UoXCIuLz9cIiwgXCIvP1wiKSwgXCJsaSYmYSYmaHJlZlwiKSsnQGxhenlSdWxlPUh0bWwuanM6IGlucHV0PXBhcnNlRG9tKGlucHV0LCBcImJvZHnvvIbvvIbvvIbvvIZ0ZXh0YXJlYe+8hu+8hu+8hu+8hkh0bWxcIikucmVwbGFjZSgv77yG77yGbHTvvJvvvJsvZywgXCI8XCIpLnJlcGxhY2UoL++8hu+8hmd077yb77ybL2csIFwiPlwiKe+8m++8m3ZhciB1cmw9cGFyc2VEb20oaW5wdXQsIFwidmlkZW/vvIbvvIbvvIbvvIZzcmNcIinvvJvvvJt1cmwnLFxuICAgICAgICAgICAgY29sX3R5cGU6IFwidGV4dF8yXCJcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5cblxucmVzLmRhdGEgPSByZXN1bHQ7XG5zZXRIb21lUmVzdWx0KHJlcyk7Iiwic2RldGFpbF9jb2xfdHlwZSI6Im1vdmllXzEiLCJzZGV0YWlsX2ZpbmRfcnVsZSI6IiJ9"
    }
  ]
}
